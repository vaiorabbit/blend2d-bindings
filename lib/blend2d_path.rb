# Ruby-Blend2D : Yet another Blend2D wrapper for Ruby
#
# * https://github.com/vaiorabbit/blend2d-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'
require_relative 'blend2d_array'
require_relative 'blend2d_geometry'
require_relative 'blend2d_object'

module Blend2D
  extend FFI::Library
  # Define/Macro


  # Enum

  BL_PATH_CMD_MOVE = 0
  BL_PATH_CMD_ON = 1
  BL_PATH_CMD_QUAD = 2
  BL_PATH_CMD_CONIC = 3
  BL_PATH_CMD_CUBIC = 4
  BL_PATH_CMD_CLOSE = 5
  BL_PATH_CMD_WEIGHT = 6
  BL_PATH_CMD_MAX_VALUE = 6
  BL_PATH_CMD_FORCE_UINT = 4294967295
  BL_PATH_CMD_PRESERVE = 4294967295
  BL_PATH_NO_FLAGS = 0
  BL_PATH_FLAG_EMPTY = 1
  BL_PATH_FLAG_MULTIPLE = 2
  BL_PATH_FLAG_QUADS = 4
  BL_PATH_FLAG_CONICS = 8
  BL_PATH_FLAG_CUBICS = 16
  BL_PATH_FLAG_INVALID = 1073741824
  BL_PATH_FLAG_DIRTY = 2147483648
  BL_PATH_FLAG_FORCE_UINT = 4294967295
  BL_PATH_REVERSE_MODE_COMPLETE = 0
  BL_PATH_REVERSE_MODE_SEPARATE = 1
  BL_PATH_REVERSE_MODE_MAX_VALUE = 1
  BL_PATH_REVERSE_MODE_FORCE_UINT = 4294967295
  BL_STROKE_JOIN_MITER_CLIP = 0
  BL_STROKE_JOIN_MITER_BEVEL = 1
  BL_STROKE_JOIN_MITER_ROUND = 2
  BL_STROKE_JOIN_BEVEL = 3
  BL_STROKE_JOIN_ROUND = 4
  BL_STROKE_JOIN_MAX_VALUE = 4
  BL_STROKE_JOIN_FORCE_UINT = 4294967295
  BL_STROKE_CAP_POSITION_START = 0
  BL_STROKE_CAP_POSITION_END = 1
  BL_STROKE_CAP_POSITION_MAX_VALUE = 1
  BL_STROKE_CAP_POSITION_FORCE_UINT = 4294967295
  BL_STROKE_CAP_BUTT = 0
  BL_STROKE_CAP_SQUARE = 1
  BL_STROKE_CAP_ROUND = 2
  BL_STROKE_CAP_ROUND_REV = 3
  BL_STROKE_CAP_TRIANGLE = 4
  BL_STROKE_CAP_TRIANGLE_REV = 5
  BL_STROKE_CAP_MAX_VALUE = 5
  BL_STROKE_CAP_FORCE_UINT = 4294967295
  BL_STROKE_TRANSFORM_ORDER_AFTER = 0
  BL_STROKE_TRANSFORM_ORDER_BEFORE = 1
  BL_STROKE_TRANSFORM_ORDER_MAX_VALUE = 1
  BL_STROKE_TRANSFORM_ORDER_FORCE_UINT = 4294967295
  BL_FLATTEN_MODE_DEFAULT = 0
  BL_FLATTEN_MODE_RECURSIVE = 1
  BL_FLATTEN_MODE_MAX_VALUE = 1
  BL_FLATTEN_MODE_FORCE_UINT = 4294967295
  BL_OFFSET_MODE_DEFAULT = 0
  BL_OFFSET_MODE_ITERATIVE = 1
  BL_OFFSET_MODE_MAX_VALUE = 1
  BL_OFFSET_MODE_FORCE_UINT = 4294967295

  # Typedef


  class BLPathView < FFI::Struct
    layout(
      :commandData, :pointer,
      :vertexData, :pointer,
      :size, :ulong,
    )
  end

  class BLStrokeOptionsCore_Contents_Content < FFI::Struct
    layout(
      :startCap, :uchar,
      :endCap, :uchar,
      :join, :uchar,
      :transformOrder, :uchar,
      :reserved, [:uchar, 4],
    )
  end

  class BLStrokeOptionsCore_Contents < FFI::Union
    layout(
      :content, BLStrokeOptionsCore_Contents_Content,
      :caps, [:uchar, 2],
      :hints, :ulong_long,
    )
  end

  class BLStrokeOptionsCore < FFI::Struct
    layout(
      :contents, BLStrokeOptionsCore_Contents,
      :width, :double,
      :miterLimit, :double,
      :dashOffset, :double,
      :dashArray, BLArrayCore,
    )
  end

  class BLPathImpl_Contents_Content < FFI::Struct
    layout(
      :commandData, :pointer,
      :vertexData, :pointer,
      :size, :ulong,
    )
  end

  class BLPathImpl_Contents < FFI::Union
    layout(
      :content, BLPathImpl_Contents_Content,
      :view, BLPathView,
    )
  end

  class BLPathImpl < FFI::Struct
    layout(
      :contents, BLPathImpl_Contents,
      :capacity, :ulong,
      :flags, :uint,
    )
  end

  typedef :int, :BLPathCmd
  typedef :int, :BLPathCmdExtra
  typedef :int, :BLPathFlags
  typedef :int, :BLPathReverseMode
  typedef :int, :BLStrokeJoin
  typedef :int, :BLStrokeCapPosition
  typedef :int, :BLStrokeCap
  typedef :int, :BLStrokeTransformOrder
  typedef :int, :BLFlattenMode
  typedef :int, :BLOffsetMode
  callback :BLPathSinkFunc, [:pointer, :pointer, :pointer], :uint
  callback :BLPathStrokeSinkFunc, [:pointer, :pointer, :pointer, :ulong, :ulong, :pointer], :uint

  # Struct

  class BLApproximationOptions < FFI::Struct
    layout(
      :flattenMode, :uchar,
      :offsetMode, :uchar,
      :reservedFlags, [:uchar, 6],
      :flattenTolerance, :double,
      :simplifyTolerance, :double,
      :offsetParameter, :double,
    )
    def flattenMode = self[:flattenMode]
    def flattenMode=(v) self[:flattenMode] = v end
    def offsetMode = self[:offsetMode]
    def offsetMode=(v) self[:offsetMode] = v end
    def reservedFlags = self[:reservedFlags]
    def reservedFlags=(v) self[:reservedFlags] = v end
    def flattenTolerance = self[:flattenTolerance]
    def flattenTolerance=(v) self[:flattenTolerance] = v end
    def simplifyTolerance = self[:simplifyTolerance]
    def simplifyTolerance=(v) self[:simplifyTolerance] = v end
    def offsetParameter = self[:offsetParameter]
    def offsetParameter=(v) self[:offsetParameter] = v end
    def self.create_as(_flattenMode_, _offsetMode_, _reservedFlags_, _flattenTolerance_, _simplifyTolerance_, _offsetParameter_)
      instance = BLApproximationOptions.new
      instance[:flattenMode] = _flattenMode_
      instance[:offsetMode] = _offsetMode_
      instance[:reservedFlags] = _reservedFlags_
      instance[:flattenTolerance] = _flattenTolerance_
      instance[:simplifyTolerance] = _simplifyTolerance_
      instance[:offsetParameter] = _offsetParameter_
      instance
    end
  end

  class BLPathCore < FFI::Struct
    layout(
      :_d, BLObjectDetail,
    )
    def _d = self[:_d]
    def _d=(v) self[:_d] = v end
    def init() = blPathInit(self)
    def self.create()
      instance = BLPathCore.new
      blPathInit(instance)
      instance
    end
    def initMove(other) = blPathInitMove(self, other)
    def initWeak(other) = blPathInitWeak(self, other)
    def destroy() = blPathDestroy(self)
    def reset() = blPathReset(self)
    def getSize() = blPathGetSize(self)
    def getCapacity() = blPathGetCapacity(self)
    def getCommandData() = blPathGetCommandData(self)
    def getVertexData() = blPathGetVertexData(self)
    def clear() = blPathClear(self)
    def shrink() = blPathShrink(self)
    def reserve(n) = blPathReserve(self, n)
    def modifyOp(op, n, cmdDataOut, vtxDataOut) = blPathModifyOp(self, op, n, cmdDataOut, vtxDataOut)
    def assignMove(other) = blPathAssignMove(self, other)
    def assignWeak(other) = blPathAssignWeak(self, other)
    def assignDeep(other) = blPathAssignDeep(self, other)
    def setVertexAt(index, cmd, x, y) = blPathSetVertexAt(self, index, cmd, x, y)
    def moveTo(x0, y0) = blPathMoveTo(self, x0, y0)
    def lineTo(x1, y1) = blPathLineTo(self, x1, y1)
    def polyTo(poly, count) = blPathPolyTo(self, poly, count)
    def quadTo(x1, y1, x2, y2) = blPathQuadTo(self, x1, y1, x2, y2)
    def conicTo(x1, y1, x2, y2, w) = blPathConicTo(self, x1, y1, x2, y2, w)
    def cubicTo(x1, y1, x2, y2, x3, y3) = blPathCubicTo(self, x1, y1, x2, y2, x3, y3)
    def smoothQuadTo(x2, y2) = blPathSmoothQuadTo(self, x2, y2)
    def smoothCubicTo(x2, y2, x3, y3) = blPathSmoothCubicTo(self, x2, y2, x3, y3)
    def arcTo(x, y, rx, ry, start, sweep, forceMoveTo) = blPathArcTo(self, x, y, rx, ry, start, sweep, forceMoveTo)
    def arcQuadrantTo(x1, y1, x2, y2) = blPathArcQuadrantTo(self, x1, y1, x2, y2)
    def ellipticArcTo(rx, ry, xAxisRotation, largeArcFlag, sweepFlag, x1, y1) = blPathEllipticArcTo(self, rx, ry, xAxisRotation, largeArcFlag, sweepFlag, x1, y1)
    def close() = blPathClose(self)
    def addGeometry(geometryType, geometryData, m, dir) = blPathAddGeometry(self, geometryType, geometryData, m, dir)
    def addBoxI(box, dir) = blPathAddBoxI(self, box, dir)
    def addBoxD(box, dir) = blPathAddBoxD(self, box, dir)
    def addRectI(rect, dir) = blPathAddRectI(self, rect, dir)
    def addRectD(rect, dir) = blPathAddRectD(self, rect, dir)
    def addPath(other, range) = blPathAddPath(self, other, range)
    def addTranslatedPath(other, range, p) = blPathAddTranslatedPath(self, other, range, p)
    def addTransformedPath(other, range, m) = blPathAddTransformedPath(self, other, range, m)
    def addReversedPath(other, range, reverseMode) = blPathAddReversedPath(self, other, range, reverseMode)
    def addStrokedPath(other, range, options, approx) = blPathAddStrokedPath(self, other, range, options, approx)
    def removeRange(range) = blPathRemoveRange(self, range)
    def translate(range, p) = blPathTranslate(self, range, p)
    def transform(range, m) = blPathTransform(self, range, m)
    def fitTo(range, rect, fitFlags) = blPathFitTo(self, range, rect, fitFlags)
    def equals(b) = blPathEquals(a, b)
    def getInfoFlags(flagsOut) = blPathGetInfoFlags(self, flagsOut)
    def getControlBox(boxOut) = blPathGetControlBox(self, boxOut)
    def getBoundingBox(boxOut) = blPathGetBoundingBox(self, boxOut)
    def getFigureRange(index, rangeOut) = blPathGetFigureRange(self, index, rangeOut)
    def getLastVertex(vtxOut) = blPathGetLastVertex(self, vtxOut)
    def getClosestVertex(p, maxDistance, indexOut, distanceOut) = blPathGetClosestVertex(self, p, maxDistance, indexOut, distanceOut)
    def hitTest(p, fillRule) = blPathHitTest(self, p, fillRule)
    def strokeToSink(range, strokeOptions, approximationOptions, a, b, c, sink, userData) = blPathStrokeToSink(self, range, strokeOptions, approximationOptions, a, b, c, sink, userData)
  end


  # Function

  def self.setup_path_symbols(output_error = false)
    symbols = [
      :blPathInit,
      :blPathInitMove,
      :blPathInitWeak,
      :blPathDestroy,
      :blPathReset,
      :blPathGetSize,
      :blPathGetCapacity,
      :blPathGetCommandData,
      :blPathGetVertexData,
      :blPathClear,
      :blPathShrink,
      :blPathReserve,
      :blPathModifyOp,
      :blPathAssignMove,
      :blPathAssignWeak,
      :blPathAssignDeep,
      :blPathSetVertexAt,
      :blPathMoveTo,
      :blPathLineTo,
      :blPathPolyTo,
      :blPathQuadTo,
      :blPathConicTo,
      :blPathCubicTo,
      :blPathSmoothQuadTo,
      :blPathSmoothCubicTo,
      :blPathArcTo,
      :blPathArcQuadrantTo,
      :blPathEllipticArcTo,
      :blPathClose,
      :blPathAddGeometry,
      :blPathAddBoxI,
      :blPathAddBoxD,
      :blPathAddRectI,
      :blPathAddRectD,
      :blPathAddPath,
      :blPathAddTranslatedPath,
      :blPathAddTransformedPath,
      :blPathAddReversedPath,
      :blPathAddStrokedPath,
      :blPathRemoveRange,
      :blPathTranslate,
      :blPathTransform,
      :blPathFitTo,
      :blPathEquals,
      :blPathGetInfoFlags,
      :blPathGetControlBox,
      :blPathGetBoundingBox,
      :blPathGetFigureRange,
      :blPathGetLastVertex,
      :blPathGetClosestVertex,
      :blPathHitTest,
      :blStrokeOptionsInit,
      :blStrokeOptionsInitMove,
      :blStrokeOptionsInitWeak,
      :blStrokeOptionsDestroy,
      :blStrokeOptionsReset,
      :blStrokeOptionsEquals,
      :blStrokeOptionsAssignMove,
      :blStrokeOptionsAssignWeak,
      :blPathStrokeToSink,
    ]
    apis = {
      :blPathInit => :blPathInit,
      :blPathInitMove => :blPathInitMove,
      :blPathInitWeak => :blPathInitWeak,
      :blPathDestroy => :blPathDestroy,
      :blPathReset => :blPathReset,
      :blPathGetSize => :blPathGetSize,
      :blPathGetCapacity => :blPathGetCapacity,
      :blPathGetCommandData => :blPathGetCommandData,
      :blPathGetVertexData => :blPathGetVertexData,
      :blPathClear => :blPathClear,
      :blPathShrink => :blPathShrink,
      :blPathReserve => :blPathReserve,
      :blPathModifyOp => :blPathModifyOp,
      :blPathAssignMove => :blPathAssignMove,
      :blPathAssignWeak => :blPathAssignWeak,
      :blPathAssignDeep => :blPathAssignDeep,
      :blPathSetVertexAt => :blPathSetVertexAt,
      :blPathMoveTo => :blPathMoveTo,
      :blPathLineTo => :blPathLineTo,
      :blPathPolyTo => :blPathPolyTo,
      :blPathQuadTo => :blPathQuadTo,
      :blPathConicTo => :blPathConicTo,
      :blPathCubicTo => :blPathCubicTo,
      :blPathSmoothQuadTo => :blPathSmoothQuadTo,
      :blPathSmoothCubicTo => :blPathSmoothCubicTo,
      :blPathArcTo => :blPathArcTo,
      :blPathArcQuadrantTo => :blPathArcQuadrantTo,
      :blPathEllipticArcTo => :blPathEllipticArcTo,
      :blPathClose => :blPathClose,
      :blPathAddGeometry => :blPathAddGeometry,
      :blPathAddBoxI => :blPathAddBoxI,
      :blPathAddBoxD => :blPathAddBoxD,
      :blPathAddRectI => :blPathAddRectI,
      :blPathAddRectD => :blPathAddRectD,
      :blPathAddPath => :blPathAddPath,
      :blPathAddTranslatedPath => :blPathAddTranslatedPath,
      :blPathAddTransformedPath => :blPathAddTransformedPath,
      :blPathAddReversedPath => :blPathAddReversedPath,
      :blPathAddStrokedPath => :blPathAddStrokedPath,
      :blPathRemoveRange => :blPathRemoveRange,
      :blPathTranslate => :blPathTranslate,
      :blPathTransform => :blPathTransform,
      :blPathFitTo => :blPathFitTo,
      :blPathEquals => :blPathEquals,
      :blPathGetInfoFlags => :blPathGetInfoFlags,
      :blPathGetControlBox => :blPathGetControlBox,
      :blPathGetBoundingBox => :blPathGetBoundingBox,
      :blPathGetFigureRange => :blPathGetFigureRange,
      :blPathGetLastVertex => :blPathGetLastVertex,
      :blPathGetClosestVertex => :blPathGetClosestVertex,
      :blPathHitTest => :blPathHitTest,
      :blStrokeOptionsInit => :blStrokeOptionsInit,
      :blStrokeOptionsInitMove => :blStrokeOptionsInitMove,
      :blStrokeOptionsInitWeak => :blStrokeOptionsInitWeak,
      :blStrokeOptionsDestroy => :blStrokeOptionsDestroy,
      :blStrokeOptionsReset => :blStrokeOptionsReset,
      :blStrokeOptionsEquals => :blStrokeOptionsEquals,
      :blStrokeOptionsAssignMove => :blStrokeOptionsAssignMove,
      :blStrokeOptionsAssignWeak => :blStrokeOptionsAssignWeak,
      :blPathStrokeToSink => :blPathStrokeToSink,
    }
    args = {
      :blPathInit => [:pointer],
      :blPathInitMove => [:pointer, :pointer],
      :blPathInitWeak => [:pointer, :pointer],
      :blPathDestroy => [:pointer],
      :blPathReset => [:pointer],
      :blPathGetSize => [:pointer],
      :blPathGetCapacity => [:pointer],
      :blPathGetCommandData => [:pointer],
      :blPathGetVertexData => [:pointer],
      :blPathClear => [:pointer],
      :blPathShrink => [:pointer],
      :blPathReserve => [:pointer, :ulong],
      :blPathModifyOp => [:pointer, :int, :ulong, :pointer, :pointer],
      :blPathAssignMove => [:pointer, :pointer],
      :blPathAssignWeak => [:pointer, :pointer],
      :blPathAssignDeep => [:pointer, :pointer],
      :blPathSetVertexAt => [:pointer, :ulong, :uint, :double, :double],
      :blPathMoveTo => [:pointer, :double, :double],
      :blPathLineTo => [:pointer, :double, :double],
      :blPathPolyTo => [:pointer, :pointer, :ulong],
      :blPathQuadTo => [:pointer, :double, :double, :double, :double],
      :blPathConicTo => [:pointer, :double, :double, :double, :double, :double],
      :blPathCubicTo => [:pointer, :double, :double, :double, :double, :double, :double],
      :blPathSmoothQuadTo => [:pointer, :double, :double],
      :blPathSmoothCubicTo => [:pointer, :double, :double, :double, :double],
      :blPathArcTo => [:pointer, :double, :double, :double, :double, :double, :double, :int],
      :blPathArcQuadrantTo => [:pointer, :double, :double, :double, :double],
      :blPathEllipticArcTo => [:pointer, :double, :double, :double, :int, :int, :double, :double],
      :blPathClose => [:pointer],
      :blPathAddGeometry => [:pointer, :int, :pointer, :pointer, :int],
      :blPathAddBoxI => [:pointer, :pointer, :int],
      :blPathAddBoxD => [:pointer, :pointer, :int],
      :blPathAddRectI => [:pointer, :pointer, :int],
      :blPathAddRectD => [:pointer, :pointer, :int],
      :blPathAddPath => [:pointer, :pointer, :pointer],
      :blPathAddTranslatedPath => [:pointer, :pointer, :pointer, :pointer],
      :blPathAddTransformedPath => [:pointer, :pointer, :pointer, :pointer],
      :blPathAddReversedPath => [:pointer, :pointer, :pointer, :int],
      :blPathAddStrokedPath => [:pointer, :pointer, :pointer, :pointer, :pointer],
      :blPathRemoveRange => [:pointer, :pointer],
      :blPathTranslate => [:pointer, :pointer, :pointer],
      :blPathTransform => [:pointer, :pointer, :pointer],
      :blPathFitTo => [:pointer, :pointer, :pointer, :uint],
      :blPathEquals => [:pointer, :pointer],
      :blPathGetInfoFlags => [:pointer, :pointer],
      :blPathGetControlBox => [:pointer, :pointer],
      :blPathGetBoundingBox => [:pointer, :pointer],
      :blPathGetFigureRange => [:pointer, :ulong, :pointer],
      :blPathGetLastVertex => [:pointer, :pointer],
      :blPathGetClosestVertex => [:pointer, :pointer, :double, :pointer, :pointer],
      :blPathHitTest => [:pointer, :pointer, :int],
      :blStrokeOptionsInit => [:pointer],
      :blStrokeOptionsInitMove => [:pointer, :pointer],
      :blStrokeOptionsInitWeak => [:pointer, :pointer],
      :blStrokeOptionsDestroy => [:pointer],
      :blStrokeOptionsReset => [:pointer],
      :blStrokeOptionsEquals => [:pointer, :pointer],
      :blStrokeOptionsAssignMove => [:pointer, :pointer],
      :blStrokeOptionsAssignWeak => [:pointer, :pointer],
      :blPathStrokeToSink => [:pointer, :pointer, :pointer, :pointer, :pointer, :pointer, :pointer, :BLPathStrokeSinkFunc, :pointer],
    }
    retvals = {
      :blPathInit => :uint,
      :blPathInitMove => :uint,
      :blPathInitWeak => :uint,
      :blPathDestroy => :uint,
      :blPathReset => :uint,
      :blPathGetSize => :ulong,
      :blPathGetCapacity => :ulong,
      :blPathGetCommandData => :pointer,
      :blPathGetVertexData => :pointer,
      :blPathClear => :uint,
      :blPathShrink => :uint,
      :blPathReserve => :uint,
      :blPathModifyOp => :uint,
      :blPathAssignMove => :uint,
      :blPathAssignWeak => :uint,
      :blPathAssignDeep => :uint,
      :blPathSetVertexAt => :uint,
      :blPathMoveTo => :uint,
      :blPathLineTo => :uint,
      :blPathPolyTo => :uint,
      :blPathQuadTo => :uint,
      :blPathConicTo => :uint,
      :blPathCubicTo => :uint,
      :blPathSmoothQuadTo => :uint,
      :blPathSmoothCubicTo => :uint,
      :blPathArcTo => :uint,
      :blPathArcQuadrantTo => :uint,
      :blPathEllipticArcTo => :uint,
      :blPathClose => :uint,
      :blPathAddGeometry => :uint,
      :blPathAddBoxI => :uint,
      :blPathAddBoxD => :uint,
      :blPathAddRectI => :uint,
      :blPathAddRectD => :uint,
      :blPathAddPath => :uint,
      :blPathAddTranslatedPath => :uint,
      :blPathAddTransformedPath => :uint,
      :blPathAddReversedPath => :uint,
      :blPathAddStrokedPath => :uint,
      :blPathRemoveRange => :uint,
      :blPathTranslate => :uint,
      :blPathTransform => :uint,
      :blPathFitTo => :uint,
      :blPathEquals => :int,
      :blPathGetInfoFlags => :uint,
      :blPathGetControlBox => :uint,
      :blPathGetBoundingBox => :uint,
      :blPathGetFigureRange => :uint,
      :blPathGetLastVertex => :uint,
      :blPathGetClosestVertex => :uint,
      :blPathHitTest => :int,
      :blStrokeOptionsInit => :uint,
      :blStrokeOptionsInitMove => :uint,
      :blStrokeOptionsInitWeak => :uint,
      :blStrokeOptionsDestroy => :uint,
      :blStrokeOptionsReset => :uint,
      :blStrokeOptionsEquals => :int,
      :blStrokeOptionsAssignMove => :uint,
      :blStrokeOptionsAssignWeak => :uint,
      :blPathStrokeToSink => :uint,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

