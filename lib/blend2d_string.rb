# Ruby-Blend2D : Yet another Blend2D wrapper for Ruby
#
# * https://github.com/vaiorabbit/blend2d-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'
require_relative 'blend2d_object'

module Blend2D
  extend FFI::Library
  # Define/Macro


  # Enum


  # Typedef


  # Struct

  class BLStringCore < FFI::Struct
    layout(
      :_d, BLObjectDetail,
    )
  end

  class BLStringImpl < FFI::Struct
    layout(
      :size, :ulong,
      :capacity, :ulong,
    )
  end


  # Function

  def self.setup_string_symbols(output_error = false)
    symbols = [
      :blStringInit,
      :blStringInitMove,
      :blStringInitWeak,
      :blStringInitWithData,
      :blStringDestroy,
      :blStringReset,
      :blStringGetData,
      :blStringGetSize,
      :blStringGetCapacity,
      :blStringClear,
      :blStringShrink,
      :blStringReserve,
      :blStringResize,
      :blStringMakeMutable,
      :blStringModifyOp,
      :blStringInsertOp,
      :blStringAssignMove,
      :blStringAssignWeak,
      :blStringAssignDeep,
      :blStringAssignData,
      :blStringApplyOpChar,
      :blStringApplyOpData,
      :blStringApplyOpString,
      :blStringApplyOpFormat,
      :blStringApplyOpFormatV,
      :blStringInsertChar,
      :blStringInsertData,
      :blStringInsertString,
      :blStringRemoveIndex,
      :blStringRemoveRange,
      :blStringEquals,
      :blStringEqualsData,
      :blStringCompare,
      :blStringCompareData,
    ]
    apis = {
      :blStringInit => :blStringInit,
      :blStringInitMove => :blStringInitMove,
      :blStringInitWeak => :blStringInitWeak,
      :blStringInitWithData => :blStringInitWithData,
      :blStringDestroy => :blStringDestroy,
      :blStringReset => :blStringReset,
      :blStringGetData => :blStringGetData,
      :blStringGetSize => :blStringGetSize,
      :blStringGetCapacity => :blStringGetCapacity,
      :blStringClear => :blStringClear,
      :blStringShrink => :blStringShrink,
      :blStringReserve => :blStringReserve,
      :blStringResize => :blStringResize,
      :blStringMakeMutable => :blStringMakeMutable,
      :blStringModifyOp => :blStringModifyOp,
      :blStringInsertOp => :blStringInsertOp,
      :blStringAssignMove => :blStringAssignMove,
      :blStringAssignWeak => :blStringAssignWeak,
      :blStringAssignDeep => :blStringAssignDeep,
      :blStringAssignData => :blStringAssignData,
      :blStringApplyOpChar => :blStringApplyOpChar,
      :blStringApplyOpData => :blStringApplyOpData,
      :blStringApplyOpString => :blStringApplyOpString,
      :blStringApplyOpFormat => :blStringApplyOpFormat,
      :blStringApplyOpFormatV => :blStringApplyOpFormatV,
      :blStringInsertChar => :blStringInsertChar,
      :blStringInsertData => :blStringInsertData,
      :blStringInsertString => :blStringInsertString,
      :blStringRemoveIndex => :blStringRemoveIndex,
      :blStringRemoveRange => :blStringRemoveRange,
      :blStringEquals => :blStringEquals,
      :blStringEqualsData => :blStringEqualsData,
      :blStringCompare => :blStringCompare,
      :blStringCompareData => :blStringCompareData,
    }
    args = {
      :blStringInit => [:pointer],
      :blStringInitMove => [:pointer, :pointer],
      :blStringInitWeak => [:pointer, :pointer],
      :blStringInitWithData => [:pointer, :pointer, :ulong],
      :blStringDestroy => [:pointer],
      :blStringReset => [:pointer],
      :blStringGetData => [:pointer],
      :blStringGetSize => [:pointer],
      :blStringGetCapacity => [:pointer],
      :blStringClear => [:pointer],
      :blStringShrink => [:pointer],
      :blStringReserve => [:pointer, :ulong],
      :blStringResize => [:pointer, :ulong, :char],
      :blStringMakeMutable => [:pointer, :pointer],
      :blStringModifyOp => [:pointer, :int, :ulong, :pointer],
      :blStringInsertOp => [:pointer, :ulong, :ulong, :pointer],
      :blStringAssignMove => [:pointer, :pointer],
      :blStringAssignWeak => [:pointer, :pointer],
      :blStringAssignDeep => [:pointer, :pointer],
      :blStringAssignData => [:pointer, :pointer, :ulong],
      :blStringApplyOpChar => [:pointer, :int, :char, :ulong],
      :blStringApplyOpData => [:pointer, :int, :pointer, :ulong],
      :blStringApplyOpString => [:pointer, :int, :pointer],
      :blStringApplyOpFormat => [:pointer, :int, :pointer],
      :blStringApplyOpFormatV => [:pointer, :int, :pointer, :int],
      :blStringInsertChar => [:pointer, :ulong, :char, :ulong],
      :blStringInsertData => [:pointer, :ulong, :pointer, :ulong],
      :blStringInsertString => [:pointer, :ulong, :pointer],
      :blStringRemoveIndex => [:pointer, :ulong],
      :blStringRemoveRange => [:pointer, :ulong, :ulong],
      :blStringEquals => [:pointer, :pointer],
      :blStringEqualsData => [:pointer, :pointer, :ulong],
      :blStringCompare => [:pointer, :pointer],
      :blStringCompareData => [:pointer, :pointer, :ulong],
    }
    retvals = {
      :blStringInit => :uint,
      :blStringInitMove => :uint,
      :blStringInitWeak => :uint,
      :blStringInitWithData => :uint,
      :blStringDestroy => :uint,
      :blStringReset => :uint,
      :blStringGetData => :pointer,
      :blStringGetSize => :ulong,
      :blStringGetCapacity => :ulong,
      :blStringClear => :uint,
      :blStringShrink => :uint,
      :blStringReserve => :uint,
      :blStringResize => :uint,
      :blStringMakeMutable => :uint,
      :blStringModifyOp => :uint,
      :blStringInsertOp => :uint,
      :blStringAssignMove => :uint,
      :blStringAssignWeak => :uint,
      :blStringAssignDeep => :uint,
      :blStringAssignData => :uint,
      :blStringApplyOpChar => :uint,
      :blStringApplyOpData => :uint,
      :blStringApplyOpString => :uint,
      :blStringApplyOpFormat => :uint,
      :blStringApplyOpFormatV => :uint,
      :blStringInsertChar => :uint,
      :blStringInsertData => :uint,
      :blStringInsertString => :uint,
      :blStringRemoveIndex => :uint,
      :blStringRemoveRange => :uint,
      :blStringEquals => :int,
      :blStringEqualsData => :int,
      :blStringCompare => :int,
      :blStringCompareData => :int,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

