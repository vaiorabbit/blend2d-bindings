# Ruby-Blend2D : Yet another Blend2D wrapper for Ruby
#
# * https://github.com/vaiorabbit/blend2d-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'
require_relative 'blend2d_array'
require_relative 'blend2d_format'
require_relative 'blend2d_geometry'
require_relative 'blend2d_imagecodec'
require_relative 'blend2d_object'

module Blend2D
  extend FFI::Library
  # Define/Macro


  # Enum

  BL_IMAGE_INFO_FLAG_NO_FLAGS = 0
  BL_IMAGE_INFO_FLAG_PROGRESSIVE = 1
  BL_IMAGE_INFO_FLAG_FORCE_UINT = 4294967295
  BL_IMAGE_SCALE_FILTER_NONE = 0
  BL_IMAGE_SCALE_FILTER_NEAREST = 1
  BL_IMAGE_SCALE_FILTER_BILINEAR = 2
  BL_IMAGE_SCALE_FILTER_BICUBIC = 3
  BL_IMAGE_SCALE_FILTER_LANCZOS = 4
  BL_IMAGE_SCALE_FILTER_MAX_VALUE = 4
  BL_IMAGE_SCALE_FILTER_FORCE_UINT = 4294967295

  # Typedef

  typedef :int, :BLImageInfoFlags
  typedef :int, :BLImageScaleFilter

  # Struct

  class BLImageData < FFI::Struct
    layout(
      :pixelData, :pointer,
      :stride, :long,
      :size, BLSizeI,
      :format, :uint,
      :flags, :uint,
    )
  end

  class BLImageInfo < FFI::Struct
    layout(
      :size, BLSizeI,
      :density, BLSize,
      :flags, :uint,
      :depth, :ushort,
      :planeCount, :ushort,
      :frameCount, :ulong_long,
      :format, [:char, 16],
      :compression, [:char, 16],
    )
  end

  class BLImageCore < FFI::Struct
    layout(
      :_d, BLObjectDetail,
    )
  end

  class BLImageImpl < FFI::Struct
    layout(
      :pixelData, :pointer,
      :stride, :long,
      :size, BLSizeI,
      :format, :uchar,
      :flags, :uchar,
      :depth, :ushort,
      :reserved, [:uchar, 4],
    )
  end


  # Function

  def self.setup_image_symbols(output_error = false)
    symbols = [
      :blImageInit,
      :blImageInitMove,
      :blImageInitWeak,
      :blImageInitAs,
      :blImageInitAsFromData,
      :blImageDestroy,
      :blImageReset,
      :blImageAssignMove,
      :blImageAssignWeak,
      :blImageAssignDeep,
      :blImageCreate,
      :blImageCreateFromData,
      :blImageGetData,
      :blImageMakeMutable,
      :blImageConvert,
      :blImageEquals,
      :blImageScale,
      :blImageReadFromFile,
      :blImageReadFromData,
      :blImageWriteToFile,
      :blImageWriteToData,
    ]
    apis = {
      :blImageInit => :blImageInit,
      :blImageInitMove => :blImageInitMove,
      :blImageInitWeak => :blImageInitWeak,
      :blImageInitAs => :blImageInitAs,
      :blImageInitAsFromData => :blImageInitAsFromData,
      :blImageDestroy => :blImageDestroy,
      :blImageReset => :blImageReset,
      :blImageAssignMove => :blImageAssignMove,
      :blImageAssignWeak => :blImageAssignWeak,
      :blImageAssignDeep => :blImageAssignDeep,
      :blImageCreate => :blImageCreate,
      :blImageCreateFromData => :blImageCreateFromData,
      :blImageGetData => :blImageGetData,
      :blImageMakeMutable => :blImageMakeMutable,
      :blImageConvert => :blImageConvert,
      :blImageEquals => :blImageEquals,
      :blImageScale => :blImageScale,
      :blImageReadFromFile => :blImageReadFromFile,
      :blImageReadFromData => :blImageReadFromData,
      :blImageWriteToFile => :blImageWriteToFile,
      :blImageWriteToData => :blImageWriteToData,
    }
    args = {
      :blImageInit => [:pointer],
      :blImageInitMove => [:pointer, :pointer],
      :blImageInitWeak => [:pointer, :pointer],
      :blImageInitAs => [:pointer, :int, :int, :int],
      :blImageInitAsFromData => [:pointer, :int, :int, :int, :pointer, :long, :int, :BLDestroyExternalDataFunc, :pointer],
      :blImageDestroy => [:pointer],
      :blImageReset => [:pointer],
      :blImageAssignMove => [:pointer, :pointer],
      :blImageAssignWeak => [:pointer, :pointer],
      :blImageAssignDeep => [:pointer, :pointer],
      :blImageCreate => [:pointer, :int, :int, :int],
      :blImageCreateFromData => [:pointer, :int, :int, :int, :pointer, :long, :int, :BLDestroyExternalDataFunc, :pointer],
      :blImageGetData => [:pointer, :pointer],
      :blImageMakeMutable => [:pointer, :pointer],
      :blImageConvert => [:pointer, :int],
      :blImageEquals => [:pointer, :pointer],
      :blImageScale => [:pointer, :pointer, :pointer, :int],
      :blImageReadFromFile => [:pointer, :pointer, :pointer],
      :blImageReadFromData => [:pointer, :pointer, :ulong, :pointer],
      :blImageWriteToFile => [:pointer, :pointer, :pointer],
      :blImageWriteToData => [:pointer, :pointer, :pointer],
    }
    retvals = {
      :blImageInit => :uint,
      :blImageInitMove => :uint,
      :blImageInitWeak => :uint,
      :blImageInitAs => :uint,
      :blImageInitAsFromData => :uint,
      :blImageDestroy => :uint,
      :blImageReset => :uint,
      :blImageAssignMove => :uint,
      :blImageAssignWeak => :uint,
      :blImageAssignDeep => :uint,
      :blImageCreate => :uint,
      :blImageCreateFromData => :uint,
      :blImageGetData => :uint,
      :blImageMakeMutable => :uint,
      :blImageConvert => :uint,
      :blImageEquals => :int,
      :blImageScale => :uint,
      :blImageReadFromFile => :uint,
      :blImageReadFromData => :uint,
      :blImageWriteToFile => :uint,
      :blImageWriteToData => :uint,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

