# Ruby-Blend2D : Yet another Blend2D wrapper for Ruby
#
# * https://github.com/vaiorabbit/blend2d-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'
require_relative 'blend2d_format'
require_relative 'blend2d_geometry'

module Blend2D
  extend FFI::Library
  # Define/Macro


  # Enum

  BL_PIXEL_CONVERTER_CREATE_NO_FLAGS = 0
  BL_PIXEL_CONVERTER_CREATE_FLAG_DONT_COPY_PALETTE = 1
  BL_PIXEL_CONVERTER_CREATE_FLAG_ALTERABLE_PALETTE = 2
  BL_PIXEL_CONVERTER_CREATE_FLAG_NO_MULTI_STEP = 4
  BL_PIXEL_CONVERTER_CREATE_FLAG_FORCE_UINT = -1

  # Typedef


  class BLPixelConverterOptions < FFI::Struct
    layout(
      :origin, BLPointI,
      :gap, :ulong,
    )
  end

  class BLPixelConverterCore_Contents_Function < FFI::Struct
    layout(
      :convertFunc, :pointer,
      :internalFlags, :uchar,
    )
  end

  class BLPixelConverterCore_Contents < FFI::Union
    layout(
      :function, BLPixelConverterCore_Contents_Function,
      :data, [:uchar, 80],
    )
  end

  class BLPixelConverterCore < FFI::Struct
    layout(
      :contents, BLPixelConverterCore_Contents,
    )
  end

  callback :BLPixelConverterFunc, [:pointer, :pointer, :long_long, :pointer, :long_long, :uint, :uint, :pointer], :uint
  typedef :int, :BLPixelConverterCreateFlags

  # Struct


  # Function

  def self.setup_pixelconverter_symbols(output_error = false)
    symbols = [
      :blPixelConverterInit,
      :blPixelConverterInitWeak,
      :blPixelConverterDestroy,
      :blPixelConverterReset,
      :blPixelConverterAssign,
      :blPixelConverterCreate,
      :blPixelConverterConvert,
    ]
    apis = {
      :blPixelConverterInit => :blPixelConverterInit,
      :blPixelConverterInitWeak => :blPixelConverterInitWeak,
      :blPixelConverterDestroy => :blPixelConverterDestroy,
      :blPixelConverterReset => :blPixelConverterReset,
      :blPixelConverterAssign => :blPixelConverterAssign,
      :blPixelConverterCreate => :blPixelConverterCreate,
      :blPixelConverterConvert => :blPixelConverterConvert,
    }
    args = {
      :blPixelConverterInit => [:pointer],
      :blPixelConverterInitWeak => [:pointer, :pointer],
      :blPixelConverterDestroy => [:pointer],
      :blPixelConverterReset => [:pointer],
      :blPixelConverterAssign => [:pointer, :pointer],
      :blPixelConverterCreate => [:pointer, :pointer, :pointer, :int],
      :blPixelConverterConvert => [:pointer, :pointer, :int64, :pointer, :int64, :uint, :uint, :pointer],
    }
    retvals = {
      :blPixelConverterInit => :uint,
      :blPixelConverterInitWeak => :uint,
      :blPixelConverterDestroy => :uint,
      :blPixelConverterReset => :uint,
      :blPixelConverterAssign => :uint,
      :blPixelConverterCreate => :uint,
      :blPixelConverterConvert => :uint,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

