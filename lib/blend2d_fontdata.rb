# Ruby-Blend2D : Yet another Blend2D wrapper for Ruby
#
# * https://github.com/vaiorabbit/blend2d-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'
require_relative 'blend2d_array'
require_relative 'blend2d_filesystem'
require_relative 'blend2d_fontdefs'
require_relative 'blend2d_object'
require_relative 'blend2d_string'

module Blend2D
  extend FFI::Library
  # Define/Macro


  # Enum

  BL_FONT_DATA_NO_FLAGS = 0
  BL_FONT_DATA_FLAG_COLLECTION = 1
  BL_FONT_DATA_FLAG_FORCE_UINT = 4294967295

  # Typedef

  typedef :int, :BLFontDataFlags

  # Struct

  class BLFontTable < FFI::Struct
    layout(
      :data, :pointer,
      :size, :ulong,
    )
  end

  class BLFontDataCore < FFI::Struct
    layout(
      :_d, BLObjectDetail,
    )
  end

  class BLFontDataVirt < FFI::Struct
    layout(
      :base, BLObjectVirtBase,
      :getTableTags, :pointer,
      :getTables, :pointer,
    )
  end

  class BLFontDataImpl < FFI::Struct
    layout(
      :virt, :pointer,
      :faceType, :uchar,
      :faceCount, :uint,
      :flags, :uint,
    )
  end


  # Function

  def self.setup_fontdata_symbols(output_error = false)
    symbols = [
      :blFontDataInit,
      :blFontDataInitMove,
      :blFontDataInitWeak,
      :blFontDataDestroy,
      :blFontDataReset,
      :blFontDataAssignMove,
      :blFontDataAssignWeak,
      :blFontDataCreateFromFile,
      :blFontDataCreateFromDataArray,
      :blFontDataCreateFromData,
      :blFontDataEquals,
      :blFontDataGetFaceCount,
      :blFontDataGetFaceType,
      :blFontDataGetFlags,
      :blFontDataGetTableTags,
      :blFontDataGetTables,
    ]
    apis = {
      :blFontDataInit => :blFontDataInit,
      :blFontDataInitMove => :blFontDataInitMove,
      :blFontDataInitWeak => :blFontDataInitWeak,
      :blFontDataDestroy => :blFontDataDestroy,
      :blFontDataReset => :blFontDataReset,
      :blFontDataAssignMove => :blFontDataAssignMove,
      :blFontDataAssignWeak => :blFontDataAssignWeak,
      :blFontDataCreateFromFile => :blFontDataCreateFromFile,
      :blFontDataCreateFromDataArray => :blFontDataCreateFromDataArray,
      :blFontDataCreateFromData => :blFontDataCreateFromData,
      :blFontDataEquals => :blFontDataEquals,
      :blFontDataGetFaceCount => :blFontDataGetFaceCount,
      :blFontDataGetFaceType => :blFontDataGetFaceType,
      :blFontDataGetFlags => :blFontDataGetFlags,
      :blFontDataGetTableTags => :blFontDataGetTableTags,
      :blFontDataGetTables => :blFontDataGetTables,
    }
    args = {
      :blFontDataInit => [:pointer],
      :blFontDataInitMove => [:pointer, :pointer],
      :blFontDataInitWeak => [:pointer, :pointer],
      :blFontDataDestroy => [:pointer],
      :blFontDataReset => [:pointer],
      :blFontDataAssignMove => [:pointer, :pointer],
      :blFontDataAssignWeak => [:pointer, :pointer],
      :blFontDataCreateFromFile => [:pointer, :pointer, :int],
      :blFontDataCreateFromDataArray => [:pointer, :pointer],
      :blFontDataCreateFromData => [:pointer, :pointer, :ulong, :BLDestroyExternalDataFunc, :pointer],
      :blFontDataEquals => [:pointer, :pointer],
      :blFontDataGetFaceCount => [:pointer],
      :blFontDataGetFaceType => [:pointer],
      :blFontDataGetFlags => [:pointer],
      :blFontDataGetTableTags => [:pointer, :uint, :pointer],
      :blFontDataGetTables => [:pointer, :uint, :pointer, :pointer, :ulong],
    }
    retvals = {
      :blFontDataInit => :uint,
      :blFontDataInitMove => :uint,
      :blFontDataInitWeak => :uint,
      :blFontDataDestroy => :uint,
      :blFontDataReset => :uint,
      :blFontDataAssignMove => :uint,
      :blFontDataAssignWeak => :uint,
      :blFontDataCreateFromFile => :uint,
      :blFontDataCreateFromDataArray => :uint,
      :blFontDataCreateFromData => :uint,
      :blFontDataEquals => :int,
      :blFontDataGetFaceCount => :uint,
      :blFontDataGetFaceType => :int,
      :blFontDataGetFlags => :int,
      :blFontDataGetTableTags => :uint,
      :blFontDataGetTables => :ulong,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

