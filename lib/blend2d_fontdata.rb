# Ruby-Blend2D : Yet another Blend2D wrapper for Ruby
#
# * https://github.com/vaiorabbit/blend2d-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'
require_relative 'blend2d_array'
require_relative 'blend2d_filesystem'
require_relative 'blend2d_fontdefs'
require_relative 'blend2d_object'
require_relative 'blend2d_string'

module Blend2D
  extend FFI::Library
  # Define/Macro


  # Enum

  BL_FONT_DATA_NO_FLAGS = 0
  BL_FONT_DATA_FLAG_COLLECTION = 1
  BL_FONT_DATA_FLAG_FORCE_UINT = -1

  # Typedef

  typedef :int, :BLFontDataFlags

  # Struct

  class BLFontTable < FFI::Struct
    layout(
      :data, :pointer,
      :size, :ulong_long,
    )
    def data = self[:data]
    def data=(v) self[:data] = v end
    def size = self[:size]
    def size=(v) self[:size] = v end
    def self.create_as(_data_, _size_)
      instance = BLFontTable.new
      instance[:data] = _data_
      instance[:size] = _size_
      instance
    end
  end

  class BLFontDataCore < FFI::Struct
    layout(
      :_d, BLObjectDetail,
    )
    def _d = self[:_d]
    def _d=(v) self[:_d] = v end
    def init() = blFontDataInit(self)
    def self.create()
      instance = BLFontDataCore.new
      blFontDataInit(instance)
      instance
    end
    def initMove(other) = blFontDataInitMove(self, other)
    def initWeak(other) = blFontDataInitWeak(self, other)
    def destroy() = blFontDataDestroy(self)
    def reset() = blFontDataReset(self)
    def assignMove(other) = blFontDataAssignMove(self, other)
    def assignWeak(other) = blFontDataAssignWeak(self, other)
    def createFromFile(fileName, readFlags) = blFontDataCreateFromFile(self, fileName, readFlags)
    def createFromDataArray(dataArray) = blFontDataCreateFromDataArray(self, dataArray)
    def createFromData(data, dataSize, destroyFunc, userData) = blFontDataCreateFromData(self, data, dataSize, destroyFunc, userData)
    def equals(b) = blFontDataEquals(a, b)
    def getFaceCount() = blFontDataGetFaceCount(self)
    def getFaceType() = blFontDataGetFaceType(self)
    def getFlags() = blFontDataGetFlags(self)
    def getTableTags(faceIndex, dst) = blFontDataGetTableTags(self, faceIndex, dst)
    def getTables(faceIndex, dst, tags, count) = blFontDataGetTables(self, faceIndex, dst, tags, count)
  end

  class BLFontDataVirt < FFI::Struct
    layout(
      :base, BLObjectVirtBase,
      :getTableTags, :pointer,
      :getTables, :pointer,
    )
    def base = self[:base]
    def base=(v) self[:base] = v end
    def getTableTags = self[:getTableTags]
    def getTableTags=(v) self[:getTableTags] = v end
    def getTables = self[:getTables]
    def getTables=(v) self[:getTables] = v end
    def self.create_as(_base_, _getTableTags_, _getTables_)
      instance = BLFontDataVirt.new
      instance[:base] = _base_
      instance[:getTableTags] = _getTableTags_
      instance[:getTables] = _getTables_
      instance
    end
  end

  class BLFontDataImpl < FFI::Struct
    layout(
      :virt, :pointer,
      :faceType, :uchar,
      :faceCount, :uint,
      :flags, :uint,
    )
    def virt = self[:virt]
    def virt=(v) self[:virt] = v end
    def faceType = self[:faceType]
    def faceType=(v) self[:faceType] = v end
    def faceCount = self[:faceCount]
    def faceCount=(v) self[:faceCount] = v end
    def flags = self[:flags]
    def flags=(v) self[:flags] = v end
    def self.create_as(_virt_, _faceType_, _faceCount_, _flags_)
      instance = BLFontDataImpl.new
      instance[:virt] = _virt_
      instance[:faceType] = _faceType_
      instance[:faceCount] = _faceCount_
      instance[:flags] = _flags_
      instance
    end
  end


  # Function

  def self.setup_fontdata_symbols(output_error = false)
    symbols = [
      :blFontDataInit,
      :blFontDataInitMove,
      :blFontDataInitWeak,
      :blFontDataDestroy,
      :blFontDataReset,
      :blFontDataAssignMove,
      :blFontDataAssignWeak,
      :blFontDataCreateFromFile,
      :blFontDataCreateFromDataArray,
      :blFontDataCreateFromData,
      :blFontDataEquals,
      :blFontDataGetFaceCount,
      :blFontDataGetFaceType,
      :blFontDataGetFlags,
      :blFontDataGetTableTags,
      :blFontDataGetTables,
    ]
    apis = {
      :blFontDataInit => :blFontDataInit,
      :blFontDataInitMove => :blFontDataInitMove,
      :blFontDataInitWeak => :blFontDataInitWeak,
      :blFontDataDestroy => :blFontDataDestroy,
      :blFontDataReset => :blFontDataReset,
      :blFontDataAssignMove => :blFontDataAssignMove,
      :blFontDataAssignWeak => :blFontDataAssignWeak,
      :blFontDataCreateFromFile => :blFontDataCreateFromFile,
      :blFontDataCreateFromDataArray => :blFontDataCreateFromDataArray,
      :blFontDataCreateFromData => :blFontDataCreateFromData,
      :blFontDataEquals => :blFontDataEquals,
      :blFontDataGetFaceCount => :blFontDataGetFaceCount,
      :blFontDataGetFaceType => :blFontDataGetFaceType,
      :blFontDataGetFlags => :blFontDataGetFlags,
      :blFontDataGetTableTags => :blFontDataGetTableTags,
      :blFontDataGetTables => :blFontDataGetTables,
    }
    args = {
      :blFontDataInit => [:pointer],
      :blFontDataInitMove => [:pointer, :pointer],
      :blFontDataInitWeak => [:pointer, :pointer],
      :blFontDataDestroy => [:pointer],
      :blFontDataReset => [:pointer],
      :blFontDataAssignMove => [:pointer, :pointer],
      :blFontDataAssignWeak => [:pointer, :pointer],
      :blFontDataCreateFromFile => [:pointer, :pointer, :int],
      :blFontDataCreateFromDataArray => [:pointer, :pointer],
      :blFontDataCreateFromData => [:pointer, :pointer, :ulong_long, :BLDestroyExternalDataFunc, :pointer],
      :blFontDataEquals => [:pointer, :pointer],
      :blFontDataGetFaceCount => [:pointer],
      :blFontDataGetFaceType => [:pointer],
      :blFontDataGetFlags => [:pointer],
      :blFontDataGetTableTags => [:pointer, :uint, :pointer],
      :blFontDataGetTables => [:pointer, :uint, :pointer, :pointer, :ulong_long],
    }
    retvals = {
      :blFontDataInit => :uint,
      :blFontDataInitMove => :uint,
      :blFontDataInitWeak => :uint,
      :blFontDataDestroy => :uint,
      :blFontDataReset => :uint,
      :blFontDataAssignMove => :uint,
      :blFontDataAssignWeak => :uint,
      :blFontDataCreateFromFile => :uint,
      :blFontDataCreateFromDataArray => :uint,
      :blFontDataCreateFromData => :uint,
      :blFontDataEquals => :bool,
      :blFontDataGetFaceCount => :uint,
      :blFontDataGetFaceType => :int,
      :blFontDataGetFlags => :int,
      :blFontDataGetTableTags => :uint,
      :blFontDataGetTables => :ulong_long,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

