# Ruby-Blend2D : Yet another Blend2D wrapper for Ruby
#
# * https://github.com/vaiorabbit/blend2d-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'
require_relative 'blend2d_font'
require_relative 'blend2d_object'
require_relative 'blend2d_string'

module Blend2D
  extend FFI::Library
  # Define/Macro


  # Enum


  # Typedef


  # Struct

  class BLFontQueryProperties < FFI::Struct
    layout(
      :style, :uint,
      :weight, :uint,
      :stretch, :uint,
    )
  end

  class BLFontManagerCore < FFI::Struct
    layout(
      :_d, BLObjectDetail,
    )
  end

  class BLFontManagerVirt < FFI::Struct
    layout(
      :base, BLObjectVirtBase,
    )
  end

  class BLFontManagerImpl < FFI::Struct
    layout(
      :virt, :pointer,
    )
  end


  # Function

  def self.setup_fontmanager_symbols(output_error = false)
    symbols = [
      :blFontManagerInit,
      :blFontManagerInitMove,
      :blFontManagerInitWeak,
      :blFontManagerInitNew,
      :blFontManagerDestroy,
      :blFontManagerReset,
      :blFontManagerAssignMove,
      :blFontManagerAssignWeak,
      :blFontManagerCreate,
      :blFontManagerGetFaceCount,
      :blFontManagerGetFamilyCount,
      :blFontManagerHasFace,
      :blFontManagerAddFace,
      :blFontManagerQueryFace,
      :blFontManagerQueryFacesByFamilyName,
      :blFontManagerEquals,
    ]
    apis = {
      :blFontManagerInit => :blFontManagerInit,
      :blFontManagerInitMove => :blFontManagerInitMove,
      :blFontManagerInitWeak => :blFontManagerInitWeak,
      :blFontManagerInitNew => :blFontManagerInitNew,
      :blFontManagerDestroy => :blFontManagerDestroy,
      :blFontManagerReset => :blFontManagerReset,
      :blFontManagerAssignMove => :blFontManagerAssignMove,
      :blFontManagerAssignWeak => :blFontManagerAssignWeak,
      :blFontManagerCreate => :blFontManagerCreate,
      :blFontManagerGetFaceCount => :blFontManagerGetFaceCount,
      :blFontManagerGetFamilyCount => :blFontManagerGetFamilyCount,
      :blFontManagerHasFace => :blFontManagerHasFace,
      :blFontManagerAddFace => :blFontManagerAddFace,
      :blFontManagerQueryFace => :blFontManagerQueryFace,
      :blFontManagerQueryFacesByFamilyName => :blFontManagerQueryFacesByFamilyName,
      :blFontManagerEquals => :blFontManagerEquals,
    }
    args = {
      :blFontManagerInit => [:pointer],
      :blFontManagerInitMove => [:pointer, :pointer],
      :blFontManagerInitWeak => [:pointer, :pointer],
      :blFontManagerInitNew => [:pointer],
      :blFontManagerDestroy => [:pointer],
      :blFontManagerReset => [:pointer],
      :blFontManagerAssignMove => [:pointer, :pointer],
      :blFontManagerAssignWeak => [:pointer, :pointer],
      :blFontManagerCreate => [:pointer],
      :blFontManagerGetFaceCount => [:pointer],
      :blFontManagerGetFamilyCount => [:pointer],
      :blFontManagerHasFace => [:pointer, :pointer],
      :blFontManagerAddFace => [:pointer, :pointer],
      :blFontManagerQueryFace => [:pointer, :pointer, :ulong, :pointer, :pointer],
      :blFontManagerQueryFacesByFamilyName => [:pointer, :pointer, :ulong, :pointer],
      :blFontManagerEquals => [:pointer, :pointer],
    }
    retvals = {
      :blFontManagerInit => :uint,
      :blFontManagerInitMove => :uint,
      :blFontManagerInitWeak => :uint,
      :blFontManagerInitNew => :uint,
      :blFontManagerDestroy => :uint,
      :blFontManagerReset => :uint,
      :blFontManagerAssignMove => :uint,
      :blFontManagerAssignWeak => :uint,
      :blFontManagerCreate => :uint,
      :blFontManagerGetFaceCount => :ulong,
      :blFontManagerGetFamilyCount => :ulong,
      :blFontManagerHasFace => :int,
      :blFontManagerAddFace => :uint,
      :blFontManagerQueryFace => :uint,
      :blFontManagerQueryFacesByFamilyName => :uint,
      :blFontManagerEquals => :int,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

