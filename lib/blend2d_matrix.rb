# Ruby-Blend2D : Yet another Blend2D wrapper for Ruby
#
# * https://github.com/vaiorabbit/blend2d-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'
require_relative 'blend2d_geometry'

module Blend2D
  extend FFI::Library
  # Define/Macro


  # Enum

  BL_TRANSFORM_TYPE_IDENTITY = 0
  BL_TRANSFORM_TYPE_TRANSLATE = 1
  BL_TRANSFORM_TYPE_SCALE = 2
  BL_TRANSFORM_TYPE_SWAP = 3
  BL_TRANSFORM_TYPE_AFFINE = 4
  BL_TRANSFORM_TYPE_INVALID = 5
  BL_TRANSFORM_TYPE_MAX_VALUE = 5
  BL_MATRIX2D_TYPE_FORCE_UINT = 4294967295
  BL_TRANSFORM_OP_RESET = 0
  BL_TRANSFORM_OP_ASSIGN = 1
  BL_TRANSFORM_OP_TRANSLATE = 2
  BL_TRANSFORM_OP_SCALE = 3
  BL_TRANSFORM_OP_SKEW = 4
  BL_TRANSFORM_OP_ROTATE = 5
  BL_TRANSFORM_OP_ROTATE_PT = 6
  BL_TRANSFORM_OP_TRANSFORM = 7
  BL_TRANSFORM_OP_POST_TRANSLATE = 8
  BL_TRANSFORM_OP_POST_SCALE = 9
  BL_TRANSFORM_OP_POST_SKEW = 10
  BL_TRANSFORM_OP_POST_ROTATE = 11
  BL_TRANSFORM_OP_POST_ROTATE_PT = 12
  BL_TRANSFORM_OP_POST_TRANSFORM = 13
  BL_TRANSFORM_OP_MAX_VALUE = 13
  BL_TRANSFORM_OP_FORCE_UINT = 4294967295

  # Typedef


  class BLMatrix2D_Contents_Elements < FFI::Struct
    layout(
      :m00, :double,
      :m01, :double,
      :m10, :double,
      :m11, :double,
      :m20, :double,
      :m21, :double,
    )
  end

  class BLMatrix2D_Contents < FFI::Union
    layout(
      :m, [:double, 6],
      :elements, BLMatrix2D_Contents_Elements,
    )
  end

  class BLMatrix2D < FFI::Struct
    layout(
      :contents, BLMatrix2D_Contents,
    )
  end

  typedef :int, :BLTransformType
  typedef :int, :BLTransformOp

  # Struct


  # Function

  def self.setup_matrix_symbols(output_error = false)
    symbols = [
      :blMatrix2DSetIdentity,
      :blMatrix2DSetTranslation,
      :blMatrix2DSetScaling,
      :blMatrix2DSetSkewing,
      :blMatrix2DSetRotation,
      :blMatrix2DApplyOp,
      :blMatrix2DInvert,
      :blMatrix2DGetType,
      :blMatrix2DMapPointDArray,
    ]
    apis = {
      :blMatrix2DSetIdentity => :blMatrix2DSetIdentity,
      :blMatrix2DSetTranslation => :blMatrix2DSetTranslation,
      :blMatrix2DSetScaling => :blMatrix2DSetScaling,
      :blMatrix2DSetSkewing => :blMatrix2DSetSkewing,
      :blMatrix2DSetRotation => :blMatrix2DSetRotation,
      :blMatrix2DApplyOp => :blMatrix2DApplyOp,
      :blMatrix2DInvert => :blMatrix2DInvert,
      :blMatrix2DGetType => :blMatrix2DGetType,
      :blMatrix2DMapPointDArray => :blMatrix2DMapPointDArray,
    }
    args = {
      :blMatrix2DSetIdentity => [:pointer],
      :blMatrix2DSetTranslation => [:pointer, :double, :double],
      :blMatrix2DSetScaling => [:pointer, :double, :double],
      :blMatrix2DSetSkewing => [:pointer, :double, :double],
      :blMatrix2DSetRotation => [:pointer, :double, :double, :double],
      :blMatrix2DApplyOp => [:pointer, :int, :pointer],
      :blMatrix2DInvert => [:pointer, :pointer],
      :blMatrix2DGetType => [:pointer],
      :blMatrix2DMapPointDArray => [:pointer, :pointer, :pointer, :ulong],
    }
    retvals = {
      :blMatrix2DSetIdentity => :uint,
      :blMatrix2DSetTranslation => :uint,
      :blMatrix2DSetScaling => :uint,
      :blMatrix2DSetSkewing => :uint,
      :blMatrix2DSetRotation => :uint,
      :blMatrix2DApplyOp => :uint,
      :blMatrix2DInvert => :uint,
      :blMatrix2DGetType => :int,
      :blMatrix2DMapPointDArray => :uint,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

