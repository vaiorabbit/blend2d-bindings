# Ruby-Blend2D : Yet another Blend2D wrapper for Ruby
#
# * https://github.com/vaiorabbit/blend2d-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'
require_relative 'blend2d_array'
require_relative 'blend2d_bitset'
require_relative 'blend2d_filesystem'
require_relative 'blend2d_fontdefs'
require_relative 'blend2d_geometry'
require_relative 'blend2d_glyphbuffer'
require_relative 'blend2d_object'
require_relative 'blend2d_path'
require_relative 'blend2d_string'

module Blend2D
  extend FFI::Library
  # Define/Macro


  # Enum


  # Typedef


  # Struct

  class BLFontVariationItem < FFI::Struct
    layout(
      :tag, :uint,
      :value, :float,
    )
  end

  class BLFontVariationSettingsView < FFI::Struct
    layout(
      :data, :pointer,
      :size, :ulong,
      :ssoData, [BLFontVariationItem, 3],
    )
  end

  class BLFontVariationSettingsCore < FFI::Struct
    layout(
      :_d, BLObjectDetail,
    )
  end

  class BLFontVariationSettingsImpl < FFI::Struct
    layout(
      :data, :pointer,
      :size, :ulong,
      :capacity, :ulong,
    )
  end


  # Function

  def self.setup_fontvariationsettings_symbols(output_error = false)
    symbols = [
      :blFontVariationSettingsInit,
      :blFontVariationSettingsInitMove,
      :blFontVariationSettingsInitWeak,
      :blFontVariationSettingsDestroy,
      :blFontVariationSettingsReset,
      :blFontVariationSettingsClear,
      :blFontVariationSettingsShrink,
      :blFontVariationSettingsAssignMove,
      :blFontVariationSettingsAssignWeak,
      :blFontVariationSettingsGetSize,
      :blFontVariationSettingsGetCapacity,
      :blFontVariationSettingsGetView,
      :blFontVariationSettingsHasValue,
      :blFontVariationSettingsGetValue,
      :blFontVariationSettingsSetValue,
      :blFontVariationSettingsRemoveValue,
      :blFontVariationSettingsEquals,
    ]
    apis = {
      :blFontVariationSettingsInit => :blFontVariationSettingsInit,
      :blFontVariationSettingsInitMove => :blFontVariationSettingsInitMove,
      :blFontVariationSettingsInitWeak => :blFontVariationSettingsInitWeak,
      :blFontVariationSettingsDestroy => :blFontVariationSettingsDestroy,
      :blFontVariationSettingsReset => :blFontVariationSettingsReset,
      :blFontVariationSettingsClear => :blFontVariationSettingsClear,
      :blFontVariationSettingsShrink => :blFontVariationSettingsShrink,
      :blFontVariationSettingsAssignMove => :blFontVariationSettingsAssignMove,
      :blFontVariationSettingsAssignWeak => :blFontVariationSettingsAssignWeak,
      :blFontVariationSettingsGetSize => :blFontVariationSettingsGetSize,
      :blFontVariationSettingsGetCapacity => :blFontVariationSettingsGetCapacity,
      :blFontVariationSettingsGetView => :blFontVariationSettingsGetView,
      :blFontVariationSettingsHasValue => :blFontVariationSettingsHasValue,
      :blFontVariationSettingsGetValue => :blFontVariationSettingsGetValue,
      :blFontVariationSettingsSetValue => :blFontVariationSettingsSetValue,
      :blFontVariationSettingsRemoveValue => :blFontVariationSettingsRemoveValue,
      :blFontVariationSettingsEquals => :blFontVariationSettingsEquals,
    }
    args = {
      :blFontVariationSettingsInit => [:pointer],
      :blFontVariationSettingsInitMove => [:pointer, :pointer],
      :blFontVariationSettingsInitWeak => [:pointer, :pointer],
      :blFontVariationSettingsDestroy => [:pointer],
      :blFontVariationSettingsReset => [:pointer],
      :blFontVariationSettingsClear => [:pointer],
      :blFontVariationSettingsShrink => [:pointer],
      :blFontVariationSettingsAssignMove => [:pointer, :pointer],
      :blFontVariationSettingsAssignWeak => [:pointer, :pointer],
      :blFontVariationSettingsGetSize => [:pointer],
      :blFontVariationSettingsGetCapacity => [:pointer],
      :blFontVariationSettingsGetView => [:pointer, :pointer],
      :blFontVariationSettingsHasValue => [:pointer, :uint],
      :blFontVariationSettingsGetValue => [:pointer, :uint],
      :blFontVariationSettingsSetValue => [:pointer, :uint, :float],
      :blFontVariationSettingsRemoveValue => [:pointer, :uint],
      :blFontVariationSettingsEquals => [:pointer, :pointer],
    }
    retvals = {
      :blFontVariationSettingsInit => :uint,
      :blFontVariationSettingsInitMove => :uint,
      :blFontVariationSettingsInitWeak => :uint,
      :blFontVariationSettingsDestroy => :uint,
      :blFontVariationSettingsReset => :uint,
      :blFontVariationSettingsClear => :uint,
      :blFontVariationSettingsShrink => :uint,
      :blFontVariationSettingsAssignMove => :uint,
      :blFontVariationSettingsAssignWeak => :uint,
      :blFontVariationSettingsGetSize => :ulong,
      :blFontVariationSettingsGetCapacity => :ulong,
      :blFontVariationSettingsGetView => :uint,
      :blFontVariationSettingsHasValue => :int,
      :blFontVariationSettingsGetValue => :float,
      :blFontVariationSettingsSetValue => :uint,
      :blFontVariationSettingsRemoveValue => :uint,
      :blFontVariationSettingsEquals => :int,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

