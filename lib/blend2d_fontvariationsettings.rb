# Ruby-Blend2D : Yet another Blend2D wrapper for Ruby
#
# * https://github.com/vaiorabbit/blend2d-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'
require_relative 'blend2d_array'
require_relative 'blend2d_bitset'
require_relative 'blend2d_filesystem'
require_relative 'blend2d_fontdefs'
require_relative 'blend2d_geometry'
require_relative 'blend2d_glyphbuffer'
require_relative 'blend2d_object'
require_relative 'blend2d_path'
require_relative 'blend2d_string'

module Blend2D
  extend FFI::Library
  # Define/Macro


  # Enum


  # Typedef


  # Struct

  class BLFontVariationItem < FFI::Struct
    layout(
      :tag, :uint,
      :value, :float,
    )
    def tag = self[:tag]
    def tag=(v) self[:tag] = v end
    def value = self[:value]
    def value=(v) self[:value] = v end
    def self.create_as(_tag_, _value_)
      instance = BLFontVariationItem.new
      instance[:tag] = _tag_
      instance[:value] = _value_
      instance
    end
  end

  class BLFontVariationSettingsView < FFI::Struct
    layout(
      :data, :pointer,
      :size, :ulong,
      :ssoData, [BLFontVariationItem, 3],
    )
    def data = self[:data]
    def data=(v) self[:data] = v end
    def size = self[:size]
    def size=(v) self[:size] = v end
    def ssoData = self[:ssoData]
    def ssoData=(v) self[:ssoData] = v end
    def self.create_as(_data_, _size_, _ssoData_)
      instance = BLFontVariationSettingsView.new
      instance[:data] = _data_
      instance[:size] = _size_
      instance[:ssoData] = _ssoData_
      instance
    end
  end

  class BLFontVariationSettingsCore < FFI::Struct
    layout(
      :_d, BLObjectDetail,
    )
    def _d = self[:_d]
    def _d=(v) self[:_d] = v end
    def init() = blFontVariationSettingsInit(self)
    def self.create()
      instance = BLFontVariationSettingsCore.new
      blFontVariationSettingsInit(instance)
      instance
    end
    def initMove(other) = blFontVariationSettingsInitMove(self, other)
    def initWeak(other) = blFontVariationSettingsInitWeak(self, other)
    def destroy() = blFontVariationSettingsDestroy(self)
    def reset() = blFontVariationSettingsReset(self)
    def clear() = blFontVariationSettingsClear(self)
    def shrink() = blFontVariationSettingsShrink(self)
    def assignMove(other) = blFontVariationSettingsAssignMove(self, other)
    def assignWeak(other) = blFontVariationSettingsAssignWeak(self, other)
    def getSize() = blFontVariationSettingsGetSize(self)
    def getCapacity() = blFontVariationSettingsGetCapacity(self)
    def getView(out) = blFontVariationSettingsGetView(self, out)
    def hasValue(variationTag) = blFontVariationSettingsHasValue(self, variationTag)
    def getValue(variationTag) = blFontVariationSettingsGetValue(self, variationTag)
    def setValue(variationTag, value) = blFontVariationSettingsSetValue(self, variationTag, value)
    def removeValue(variationTag) = blFontVariationSettingsRemoveValue(self, variationTag)
    def equals(b) = blFontVariationSettingsEquals(a, b)
  end

  class BLFontVariationSettingsImpl < FFI::Struct
    layout(
      :data, :pointer,
      :size, :ulong,
      :capacity, :ulong,
    )
    def data = self[:data]
    def data=(v) self[:data] = v end
    def size = self[:size]
    def size=(v) self[:size] = v end
    def capacity = self[:capacity]
    def capacity=(v) self[:capacity] = v end
    def self.create_as(_data_, _size_, _capacity_)
      instance = BLFontVariationSettingsImpl.new
      instance[:data] = _data_
      instance[:size] = _size_
      instance[:capacity] = _capacity_
      instance
    end
  end


  # Function

  def self.setup_fontvariationsettings_symbols(output_error = false)
    symbols = [
      :blFontVariationSettingsInit,
      :blFontVariationSettingsInitMove,
      :blFontVariationSettingsInitWeak,
      :blFontVariationSettingsDestroy,
      :blFontVariationSettingsReset,
      :blFontVariationSettingsClear,
      :blFontVariationSettingsShrink,
      :blFontVariationSettingsAssignMove,
      :blFontVariationSettingsAssignWeak,
      :blFontVariationSettingsGetSize,
      :blFontVariationSettingsGetCapacity,
      :blFontVariationSettingsGetView,
      :blFontVariationSettingsHasValue,
      :blFontVariationSettingsGetValue,
      :blFontVariationSettingsSetValue,
      :blFontVariationSettingsRemoveValue,
      :blFontVariationSettingsEquals,
    ]
    apis = {
      :blFontVariationSettingsInit => :blFontVariationSettingsInit,
      :blFontVariationSettingsInitMove => :blFontVariationSettingsInitMove,
      :blFontVariationSettingsInitWeak => :blFontVariationSettingsInitWeak,
      :blFontVariationSettingsDestroy => :blFontVariationSettingsDestroy,
      :blFontVariationSettingsReset => :blFontVariationSettingsReset,
      :blFontVariationSettingsClear => :blFontVariationSettingsClear,
      :blFontVariationSettingsShrink => :blFontVariationSettingsShrink,
      :blFontVariationSettingsAssignMove => :blFontVariationSettingsAssignMove,
      :blFontVariationSettingsAssignWeak => :blFontVariationSettingsAssignWeak,
      :blFontVariationSettingsGetSize => :blFontVariationSettingsGetSize,
      :blFontVariationSettingsGetCapacity => :blFontVariationSettingsGetCapacity,
      :blFontVariationSettingsGetView => :blFontVariationSettingsGetView,
      :blFontVariationSettingsHasValue => :blFontVariationSettingsHasValue,
      :blFontVariationSettingsGetValue => :blFontVariationSettingsGetValue,
      :blFontVariationSettingsSetValue => :blFontVariationSettingsSetValue,
      :blFontVariationSettingsRemoveValue => :blFontVariationSettingsRemoveValue,
      :blFontVariationSettingsEquals => :blFontVariationSettingsEquals,
    }
    args = {
      :blFontVariationSettingsInit => [:pointer],
      :blFontVariationSettingsInitMove => [:pointer, :pointer],
      :blFontVariationSettingsInitWeak => [:pointer, :pointer],
      :blFontVariationSettingsDestroy => [:pointer],
      :blFontVariationSettingsReset => [:pointer],
      :blFontVariationSettingsClear => [:pointer],
      :blFontVariationSettingsShrink => [:pointer],
      :blFontVariationSettingsAssignMove => [:pointer, :pointer],
      :blFontVariationSettingsAssignWeak => [:pointer, :pointer],
      :blFontVariationSettingsGetSize => [:pointer],
      :blFontVariationSettingsGetCapacity => [:pointer],
      :blFontVariationSettingsGetView => [:pointer, :pointer],
      :blFontVariationSettingsHasValue => [:pointer, :uint],
      :blFontVariationSettingsGetValue => [:pointer, :uint],
      :blFontVariationSettingsSetValue => [:pointer, :uint, :float],
      :blFontVariationSettingsRemoveValue => [:pointer, :uint],
      :blFontVariationSettingsEquals => [:pointer, :pointer],
    }
    retvals = {
      :blFontVariationSettingsInit => :uint,
      :blFontVariationSettingsInitMove => :uint,
      :blFontVariationSettingsInitWeak => :uint,
      :blFontVariationSettingsDestroy => :uint,
      :blFontVariationSettingsReset => :uint,
      :blFontVariationSettingsClear => :uint,
      :blFontVariationSettingsShrink => :uint,
      :blFontVariationSettingsAssignMove => :uint,
      :blFontVariationSettingsAssignWeak => :uint,
      :blFontVariationSettingsGetSize => :ulong,
      :blFontVariationSettingsGetCapacity => :ulong,
      :blFontVariationSettingsGetView => :uint,
      :blFontVariationSettingsHasValue => :int,
      :blFontVariationSettingsGetValue => :float,
      :blFontVariationSettingsSetValue => :uint,
      :blFontVariationSettingsRemoveValue => :uint,
      :blFontVariationSettingsEquals => :int,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

