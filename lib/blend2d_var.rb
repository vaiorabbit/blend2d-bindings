# Ruby-Blend2D : Yet another Blend2D wrapper for Ruby
#
# * https://github.com/vaiorabbit/blend2d-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'
require_relative 'blend2d_object'
require_relative 'blend2d_rgba'

module Blend2D
  extend FFI::Library
  # Define/Macro


  # Enum


  # Typedef


  # Struct

  class BLVarCore < FFI::Struct
    layout(
      :_d, BLObjectDetail,
    )
    def _d = self[:_d]
    def _d=(v) self[:_d] = v end
    def initType(type) = blVarInitType(self, type)
    def initNull() = blVarInitNull(self)
    def initBool(value) = blVarInitBool(self, value)
    def initInt32(value) = blVarInitInt32(self, value)
    def initInt64(value) = blVarInitInt64(self, value)
    def initUInt32(value) = blVarInitUInt32(self, value)
    def initUInt64(value) = blVarInitUInt64(self, value)
    def initDouble(value) = blVarInitDouble(self, value)
    def initRgba(rgba) = blVarInitRgba(self, rgba)
    def initRgba32(rgba32) = blVarInitRgba32(self, rgba32)
    def initRgba64(rgba64) = blVarInitRgba64(self, rgba64)
    def initMove(other) = blVarInitMove(self, other)
    def initWeak(other) = blVarInitWeak(self, other)
    def destroy() = blVarDestroy(self)
    def reset() = blVarReset(self)
    def assignNull() = blVarAssignNull(self)
    def assignBool(value) = blVarAssignBool(self, value)
    def assignInt32(value) = blVarAssignInt32(self, value)
    def assignInt64(value) = blVarAssignInt64(self, value)
    def assignUInt32(value) = blVarAssignUInt32(self, value)
    def assignUInt64(value) = blVarAssignUInt64(self, value)
    def assignDouble(value) = blVarAssignDouble(self, value)
    def assignRgba(rgba) = blVarAssignRgba(self, rgba)
    def assignRgba32(rgba32) = blVarAssignRgba32(self, rgba32)
    def assignRgba64(rgba64) = blVarAssignRgba64(self, rgba64)
    def assignMove(other) = blVarAssignMove(self, other)
    def assignWeak(other) = blVarAssignWeak(self, other)
    def getType() = blVarGetType(self)
    def toBool(out) = blVarToBool(self, out)
    def toInt32(out) = blVarToInt32(self, out)
    def toInt64(out) = blVarToInt64(self, out)
    def toUInt32(out) = blVarToUInt32(self, out)
    def toUInt64(out) = blVarToUInt64(self, out)
    def toDouble(out) = blVarToDouble(self, out)
    def toRgba(out) = blVarToRgba(self, out)
    def toRgba32(out) = blVarToRgba32(self, out)
    def toRgba64(out) = blVarToRgba64(self, out)
    def equals(b) = blVarEquals(a, b)
    def equalsNull() = blVarEqualsNull(self)
    def equalsBool(value) = blVarEqualsBool(self, value)
    def equalsInt64(value) = blVarEqualsInt64(self, value)
    def equalsUInt64(value) = blVarEqualsUInt64(self, value)
    def equalsDouble(value) = blVarEqualsDouble(self, value)
    def equalsRgba(rgba) = blVarEqualsRgba(self, rgba)
    def equalsRgba32(rgba32) = blVarEqualsRgba32(self, rgba32)
    def equalsRgba64(rgba64) = blVarEqualsRgba64(self, rgba64)
    def strictEquals(b) = blVarStrictEquals(a, b)
    def self.create_as(__d_)
      instance = BLVarCore.new
      instance[:_d] = __d_
      instance
    end
  end


  # Function

  def self.setup_var_symbols(output_error = false)
    symbols = [
      :blVarInitType,
      :blVarInitNull,
      :blVarInitBool,
      :blVarInitInt32,
      :blVarInitInt64,
      :blVarInitUInt32,
      :blVarInitUInt64,
      :blVarInitDouble,
      :blVarInitRgba,
      :blVarInitRgba32,
      :blVarInitRgba64,
      :blVarInitMove,
      :blVarInitWeak,
      :blVarDestroy,
      :blVarReset,
      :blVarAssignNull,
      :blVarAssignBool,
      :blVarAssignInt32,
      :blVarAssignInt64,
      :blVarAssignUInt32,
      :blVarAssignUInt64,
      :blVarAssignDouble,
      :blVarAssignRgba,
      :blVarAssignRgba32,
      :blVarAssignRgba64,
      :blVarAssignMove,
      :blVarAssignWeak,
      :blVarGetType,
      :blVarToBool,
      :blVarToInt32,
      :blVarToInt64,
      :blVarToUInt32,
      :blVarToUInt64,
      :blVarToDouble,
      :blVarToRgba,
      :blVarToRgba32,
      :blVarToRgba64,
      :blVarEquals,
      :blVarEqualsNull,
      :blVarEqualsBool,
      :blVarEqualsInt64,
      :blVarEqualsUInt64,
      :blVarEqualsDouble,
      :blVarEqualsRgba,
      :blVarEqualsRgba32,
      :blVarEqualsRgba64,
      :blVarStrictEquals,
    ]
    apis = {
      :blVarInitType => :blVarInitType,
      :blVarInitNull => :blVarInitNull,
      :blVarInitBool => :blVarInitBool,
      :blVarInitInt32 => :blVarInitInt32,
      :blVarInitInt64 => :blVarInitInt64,
      :blVarInitUInt32 => :blVarInitUInt32,
      :blVarInitUInt64 => :blVarInitUInt64,
      :blVarInitDouble => :blVarInitDouble,
      :blVarInitRgba => :blVarInitRgba,
      :blVarInitRgba32 => :blVarInitRgba32,
      :blVarInitRgba64 => :blVarInitRgba64,
      :blVarInitMove => :blVarInitMove,
      :blVarInitWeak => :blVarInitWeak,
      :blVarDestroy => :blVarDestroy,
      :blVarReset => :blVarReset,
      :blVarAssignNull => :blVarAssignNull,
      :blVarAssignBool => :blVarAssignBool,
      :blVarAssignInt32 => :blVarAssignInt32,
      :blVarAssignInt64 => :blVarAssignInt64,
      :blVarAssignUInt32 => :blVarAssignUInt32,
      :blVarAssignUInt64 => :blVarAssignUInt64,
      :blVarAssignDouble => :blVarAssignDouble,
      :blVarAssignRgba => :blVarAssignRgba,
      :blVarAssignRgba32 => :blVarAssignRgba32,
      :blVarAssignRgba64 => :blVarAssignRgba64,
      :blVarAssignMove => :blVarAssignMove,
      :blVarAssignWeak => :blVarAssignWeak,
      :blVarGetType => :blVarGetType,
      :blVarToBool => :blVarToBool,
      :blVarToInt32 => :blVarToInt32,
      :blVarToInt64 => :blVarToInt64,
      :blVarToUInt32 => :blVarToUInt32,
      :blVarToUInt64 => :blVarToUInt64,
      :blVarToDouble => :blVarToDouble,
      :blVarToRgba => :blVarToRgba,
      :blVarToRgba32 => :blVarToRgba32,
      :blVarToRgba64 => :blVarToRgba64,
      :blVarEquals => :blVarEquals,
      :blVarEqualsNull => :blVarEqualsNull,
      :blVarEqualsBool => :blVarEqualsBool,
      :blVarEqualsInt64 => :blVarEqualsInt64,
      :blVarEqualsUInt64 => :blVarEqualsUInt64,
      :blVarEqualsDouble => :blVarEqualsDouble,
      :blVarEqualsRgba => :blVarEqualsRgba,
      :blVarEqualsRgba32 => :blVarEqualsRgba32,
      :blVarEqualsRgba64 => :blVarEqualsRgba64,
      :blVarStrictEquals => :blVarStrictEquals,
    }
    args = {
      :blVarInitType => [:pointer, :int],
      :blVarInitNull => [:pointer],
      :blVarInitBool => [:pointer, :int],
      :blVarInitInt32 => [:pointer, :int],
      :blVarInitInt64 => [:pointer, :long_long],
      :blVarInitUInt32 => [:pointer, :uint],
      :blVarInitUInt64 => [:pointer, :ulong_long],
      :blVarInitDouble => [:pointer, :double],
      :blVarInitRgba => [:pointer, :pointer],
      :blVarInitRgba32 => [:pointer, :uint],
      :blVarInitRgba64 => [:pointer, :ulong_long],
      :blVarInitMove => [:pointer, :pointer],
      :blVarInitWeak => [:pointer, :pointer],
      :blVarDestroy => [:pointer],
      :blVarReset => [:pointer],
      :blVarAssignNull => [:pointer],
      :blVarAssignBool => [:pointer, :int],
      :blVarAssignInt32 => [:pointer, :int],
      :blVarAssignInt64 => [:pointer, :long_long],
      :blVarAssignUInt32 => [:pointer, :uint],
      :blVarAssignUInt64 => [:pointer, :ulong_long],
      :blVarAssignDouble => [:pointer, :double],
      :blVarAssignRgba => [:pointer, :pointer],
      :blVarAssignRgba32 => [:pointer, :uint],
      :blVarAssignRgba64 => [:pointer, :ulong_long],
      :blVarAssignMove => [:pointer, :pointer],
      :blVarAssignWeak => [:pointer, :pointer],
      :blVarGetType => [:pointer],
      :blVarToBool => [:pointer, :pointer],
      :blVarToInt32 => [:pointer, :pointer],
      :blVarToInt64 => [:pointer, :pointer],
      :blVarToUInt32 => [:pointer, :pointer],
      :blVarToUInt64 => [:pointer, :pointer],
      :blVarToDouble => [:pointer, :pointer],
      :blVarToRgba => [:pointer, :pointer],
      :blVarToRgba32 => [:pointer, :pointer],
      :blVarToRgba64 => [:pointer, :pointer],
      :blVarEquals => [:pointer, :pointer],
      :blVarEqualsNull => [:pointer],
      :blVarEqualsBool => [:pointer, :int],
      :blVarEqualsInt64 => [:pointer, :long_long],
      :blVarEqualsUInt64 => [:pointer, :ulong_long],
      :blVarEqualsDouble => [:pointer, :double],
      :blVarEqualsRgba => [:pointer, :pointer],
      :blVarEqualsRgba32 => [:pointer, :uint],
      :blVarEqualsRgba64 => [:pointer, :ulong_long],
      :blVarStrictEquals => [:pointer, :pointer],
    }
    retvals = {
      :blVarInitType => :uint,
      :blVarInitNull => :uint,
      :blVarInitBool => :uint,
      :blVarInitInt32 => :uint,
      :blVarInitInt64 => :uint,
      :blVarInitUInt32 => :uint,
      :blVarInitUInt64 => :uint,
      :blVarInitDouble => :uint,
      :blVarInitRgba => :uint,
      :blVarInitRgba32 => :uint,
      :blVarInitRgba64 => :uint,
      :blVarInitMove => :uint,
      :blVarInitWeak => :uint,
      :blVarDestroy => :uint,
      :blVarReset => :uint,
      :blVarAssignNull => :uint,
      :blVarAssignBool => :uint,
      :blVarAssignInt32 => :uint,
      :blVarAssignInt64 => :uint,
      :blVarAssignUInt32 => :uint,
      :blVarAssignUInt64 => :uint,
      :blVarAssignDouble => :uint,
      :blVarAssignRgba => :uint,
      :blVarAssignRgba32 => :uint,
      :blVarAssignRgba64 => :uint,
      :blVarAssignMove => :uint,
      :blVarAssignWeak => :uint,
      :blVarGetType => :int,
      :blVarToBool => :uint,
      :blVarToInt32 => :uint,
      :blVarToInt64 => :uint,
      :blVarToUInt32 => :uint,
      :blVarToUInt64 => :uint,
      :blVarToDouble => :uint,
      :blVarToRgba => :uint,
      :blVarToRgba32 => :uint,
      :blVarToRgba64 => :uint,
      :blVarEquals => :int,
      :blVarEqualsNull => :int,
      :blVarEqualsBool => :int,
      :blVarEqualsInt64 => :int,
      :blVarEqualsUInt64 => :int,
      :blVarEqualsDouble => :int,
      :blVarEqualsRgba => :int,
      :blVarEqualsRgba32 => :int,
      :blVarEqualsRgba64 => :int,
      :blVarStrictEquals => :int,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

