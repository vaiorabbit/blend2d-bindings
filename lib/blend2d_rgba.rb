# Ruby-Blend2D : Yet another Blend2D wrapper for Ruby
#
# * https://github.com/vaiorabbit/blend2d-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module Blend2D
  extend FFI::Library
  # Define/Macro


  # Enum


  # Typedef


  # Struct

  class BLRgba32 < FFI::Struct
    layout(
      :value, :uint,
    )
    def value = self[:value]
    def value=(v) self[:value] = v end
    def self.create_as(_value_)
      instance = BLRgba32.new
      instance[:value] = _value_
      instance
    end
  end

  class BLRgba64 < FFI::Struct
    layout(
      :value, :ulong_long,
    )
    def value = self[:value]
    def value=(v) self[:value] = v end
    def self.create_as(_value_)
      instance = BLRgba64.new
      instance[:value] = _value_
      instance
    end
  end

  class BLRgba < FFI::Struct
    layout(
      :r, :float,
      :g, :float,
      :b, :float,
      :a, :float,
    )
    def r = self[:r]
    def r=(v) self[:r] = v end
    def g = self[:g]
    def g=(v) self[:g] = v end
    def b = self[:b]
    def b=(v) self[:b] = v end
    def a = self[:a]
    def a=(v) self[:a] = v end
    def self.create_as(_r_, _g_, _b_, _a_)
      instance = BLRgba.new
      instance[:r] = _r_
      instance[:g] = _g_
      instance[:b] = _b_
      instance[:a] = _a_
      instance
    end
  end


  # Function

  def self.setup_rgba_symbols(output_error = false)
    symbols = [
    ]
    apis = {
    }
    args = {
    }
    retvals = {
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

