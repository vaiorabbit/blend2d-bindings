# Ruby-Blend2D : Yet another Blend2D wrapper for Ruby
#
# * https://github.com/vaiorabbit/blend2d-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module Blend2D
  extend FFI::Library
  # Define/Macro


  # Enum

  BL_GEOMETRY_DIRECTION_NONE = 0
  BL_GEOMETRY_DIRECTION_CW = 1
  BL_GEOMETRY_DIRECTION_CCW = 2
  BL_GEOMETRY_DIRECTION_FORCE_UINT = 4294967295
  BL_GEOMETRY_TYPE_NONE = 0
  BL_GEOMETRY_TYPE_BOXI = 1
  BL_GEOMETRY_TYPE_BOXD = 2
  BL_GEOMETRY_TYPE_RECTI = 3
  BL_GEOMETRY_TYPE_RECTD = 4
  BL_GEOMETRY_TYPE_CIRCLE = 5
  BL_GEOMETRY_TYPE_ELLIPSE = 6
  BL_GEOMETRY_TYPE_ROUND_RECT = 7
  BL_GEOMETRY_TYPE_ARC = 8
  BL_GEOMETRY_TYPE_CHORD = 9
  BL_GEOMETRY_TYPE_PIE = 10
  BL_GEOMETRY_TYPE_LINE = 11
  BL_GEOMETRY_TYPE_TRIANGLE = 12
  BL_GEOMETRY_TYPE_POLYLINEI = 13
  BL_GEOMETRY_TYPE_POLYLINED = 14
  BL_GEOMETRY_TYPE_POLYGONI = 15
  BL_GEOMETRY_TYPE_POLYGOND = 16
  BL_GEOMETRY_TYPE_ARRAY_VIEW_BOXI = 17
  BL_GEOMETRY_TYPE_ARRAY_VIEW_BOXD = 18
  BL_GEOMETRY_TYPE_ARRAY_VIEW_RECTI = 19
  BL_GEOMETRY_TYPE_ARRAY_VIEW_RECTD = 20
  BL_GEOMETRY_TYPE_PATH = 21
  BL_GEOMETRY_TYPE_MAX_VALUE = 21
  BL_GEOMETRY_TYPE_SIMPLE_LAST = 12
  BL_GEOMETRY_TYPE_FORCE_UINT = 4294967295
  BL_FILL_RULE_NON_ZERO = 0
  BL_FILL_RULE_EVEN_ODD = 1
  BL_FILL_RULE_MAX_VALUE = 1
  BL_FILL_RULE_FORCE_UINT = 4294967295
  BL_HIT_TEST_IN = 0
  BL_HIT_TEST_PART = 1
  BL_HIT_TEST_OUT = 2
  BL_HIT_TEST_INVALID = 4294967295
  BL_HIT_TEST_FORCE_UINT = 4294967295

  # Typedef

  typedef :int, :BLGeometryDirection
  typedef :int, :BLGeometryType
  typedef :int, :BLFillRule
  typedef :int, :BLHitTest

  # Struct

  class BLPointI < FFI::Struct
    layout(
      :x, :int,
      :y, :int,
    )
  end

  class BLSizeI < FFI::Struct
    layout(
      :w, :int,
      :h, :int,
    )
  end

  class BLBoxI < FFI::Struct
    layout(
      :x0, :int,
      :y0, :int,
      :x1, :int,
      :y1, :int,
    )
  end

  class BLRectI < FFI::Struct
    layout(
      :x, :int,
      :y, :int,
      :w, :int,
      :h, :int,
    )
  end

  class BLPoint < FFI::Struct
    layout(
      :x, :double,
      :y, :double,
    )
  end

  class BLSize < FFI::Struct
    layout(
      :w, :double,
      :h, :double,
    )
  end

  class BLBox < FFI::Struct
    layout(
      :x0, :double,
      :y0, :double,
      :x1, :double,
      :y1, :double,
    )
  end

  class BLRect < FFI::Struct
    layout(
      :x, :double,
      :y, :double,
      :w, :double,
      :h, :double,
    )
  end

  class BLLine < FFI::Struct
    layout(
      :x0, :double,
      :y0, :double,
      :x1, :double,
      :y1, :double,
    )
  end

  class BLTriangle < FFI::Struct
    layout(
      :x0, :double,
      :y0, :double,
      :x1, :double,
      :y1, :double,
      :x2, :double,
      :y2, :double,
    )
  end

  class BLRoundRect < FFI::Struct
    layout(
      :x, :double,
      :y, :double,
      :w, :double,
      :h, :double,
      :rx, :double,
      :ry, :double,
    )
  end

  class BLCircle < FFI::Struct
    layout(
      :cx, :double,
      :cy, :double,
      :r, :double,
    )
  end

  class BLEllipse < FFI::Struct
    layout(
      :cx, :double,
      :cy, :double,
      :rx, :double,
      :ry, :double,
    )
  end

  class BLArc < FFI::Struct
    layout(
      :cx, :double,
      :cy, :double,
      :rx, :double,
      :ry, :double,
      :start, :double,
      :sweep, :double,
    )
  end


  # Function

  def self.setup_geometry_symbols(output_error = false)
    symbols = [
    ]
    apis = {
    }
    args = {
    }
    retvals = {
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

