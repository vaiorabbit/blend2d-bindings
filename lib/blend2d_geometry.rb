# Ruby-Blend2D : Yet another Blend2D wrapper for Ruby
#
# * https://github.com/vaiorabbit/blend2d-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module Blend2D
  extend FFI::Library
  # Define/Macro


  # Enum

  BL_GEOMETRY_DIRECTION_NONE = 0
  BL_GEOMETRY_DIRECTION_CW = 1
  BL_GEOMETRY_DIRECTION_CCW = 2
  BL_GEOMETRY_DIRECTION_FORCE_UINT = -1
  BL_GEOMETRY_TYPE_NONE = 0
  BL_GEOMETRY_TYPE_BOXI = 1
  BL_GEOMETRY_TYPE_BOXD = 2
  BL_GEOMETRY_TYPE_RECTI = 3
  BL_GEOMETRY_TYPE_RECTD = 4
  BL_GEOMETRY_TYPE_CIRCLE = 5
  BL_GEOMETRY_TYPE_ELLIPSE = 6
  BL_GEOMETRY_TYPE_ROUND_RECT = 7
  BL_GEOMETRY_TYPE_ARC = 8
  BL_GEOMETRY_TYPE_CHORD = 9
  BL_GEOMETRY_TYPE_PIE = 10
  BL_GEOMETRY_TYPE_LINE = 11
  BL_GEOMETRY_TYPE_TRIANGLE = 12
  BL_GEOMETRY_TYPE_POLYLINEI = 13
  BL_GEOMETRY_TYPE_POLYLINED = 14
  BL_GEOMETRY_TYPE_POLYGONI = 15
  BL_GEOMETRY_TYPE_POLYGOND = 16
  BL_GEOMETRY_TYPE_ARRAY_VIEW_BOXI = 17
  BL_GEOMETRY_TYPE_ARRAY_VIEW_BOXD = 18
  BL_GEOMETRY_TYPE_ARRAY_VIEW_RECTI = 19
  BL_GEOMETRY_TYPE_ARRAY_VIEW_RECTD = 20
  BL_GEOMETRY_TYPE_PATH = 21
  BL_GEOMETRY_TYPE_MAX_VALUE = 21
  BL_GEOMETRY_TYPE_SIMPLE_LAST = 12
  BL_GEOMETRY_TYPE_FORCE_UINT = -1
  BL_FILL_RULE_NON_ZERO = 0
  BL_FILL_RULE_EVEN_ODD = 1
  BL_FILL_RULE_MAX_VALUE = 1
  BL_FILL_RULE_FORCE_UINT = -1
  BL_HIT_TEST_IN = 0
  BL_HIT_TEST_PART = 1
  BL_HIT_TEST_OUT = 2
  BL_HIT_TEST_INVALID = -1
  BL_HIT_TEST_FORCE_UINT = -1

  # Typedef

  typedef :int, :BLGeometryDirection
  typedef :int, :BLGeometryType
  typedef :int, :BLFillRule
  typedef :int, :BLHitTest

  # Struct

  class BLPointI < FFI::Struct
    layout(
      :x, :int,
      :y, :int,
    )
    def x = self[:x]
    def x=(v) self[:x] = v end
    def y = self[:y]
    def y=(v) self[:y] = v end
    def self.create_as(_x_, _y_)
      instance = BLPointI.new
      instance[:x] = _x_
      instance[:y] = _y_
      instance
    end
  end

  class BLSizeI < FFI::Struct
    layout(
      :w, :int,
      :h, :int,
    )
    def w = self[:w]
    def w=(v) self[:w] = v end
    def h = self[:h]
    def h=(v) self[:h] = v end
    def self.create_as(_w_, _h_)
      instance = BLSizeI.new
      instance[:w] = _w_
      instance[:h] = _h_
      instance
    end
  end

  class BLBoxI < FFI::Struct
    layout(
      :x0, :int,
      :y0, :int,
      :x1, :int,
      :y1, :int,
    )
    def x0 = self[:x0]
    def x0=(v) self[:x0] = v end
    def y0 = self[:y0]
    def y0=(v) self[:y0] = v end
    def x1 = self[:x1]
    def x1=(v) self[:x1] = v end
    def y1 = self[:y1]
    def y1=(v) self[:y1] = v end
    def self.create_as(_x0_, _y0_, _x1_, _y1_)
      instance = BLBoxI.new
      instance[:x0] = _x0_
      instance[:y0] = _y0_
      instance[:x1] = _x1_
      instance[:y1] = _y1_
      instance
    end
  end

  class BLRectI < FFI::Struct
    layout(
      :x, :int,
      :y, :int,
      :w, :int,
      :h, :int,
    )
    def x = self[:x]
    def x=(v) self[:x] = v end
    def y = self[:y]
    def y=(v) self[:y] = v end
    def w = self[:w]
    def w=(v) self[:w] = v end
    def h = self[:h]
    def h=(v) self[:h] = v end
    def self.create_as(_x_, _y_, _w_, _h_)
      instance = BLRectI.new
      instance[:x] = _x_
      instance[:y] = _y_
      instance[:w] = _w_
      instance[:h] = _h_
      instance
    end
  end

  class BLPoint < FFI::Struct
    layout(
      :x, :double,
      :y, :double,
    )
    def x = self[:x]
    def x=(v) self[:x] = v end
    def y = self[:y]
    def y=(v) self[:y] = v end
    def self.create_as(_x_, _y_)
      instance = BLPoint.new
      instance[:x] = _x_
      instance[:y] = _y_
      instance
    end
  end

  class BLSize < FFI::Struct
    layout(
      :w, :double,
      :h, :double,
    )
    def w = self[:w]
    def w=(v) self[:w] = v end
    def h = self[:h]
    def h=(v) self[:h] = v end
    def self.create_as(_w_, _h_)
      instance = BLSize.new
      instance[:w] = _w_
      instance[:h] = _h_
      instance
    end
  end

  class BLBox < FFI::Struct
    layout(
      :x0, :double,
      :y0, :double,
      :x1, :double,
      :y1, :double,
    )
    def x0 = self[:x0]
    def x0=(v) self[:x0] = v end
    def y0 = self[:y0]
    def y0=(v) self[:y0] = v end
    def x1 = self[:x1]
    def x1=(v) self[:x1] = v end
    def y1 = self[:y1]
    def y1=(v) self[:y1] = v end
    def self.create_as(_x0_, _y0_, _x1_, _y1_)
      instance = BLBox.new
      instance[:x0] = _x0_
      instance[:y0] = _y0_
      instance[:x1] = _x1_
      instance[:y1] = _y1_
      instance
    end
  end

  class BLRect < FFI::Struct
    layout(
      :x, :double,
      :y, :double,
      :w, :double,
      :h, :double,
    )
    def x = self[:x]
    def x=(v) self[:x] = v end
    def y = self[:y]
    def y=(v) self[:y] = v end
    def w = self[:w]
    def w=(v) self[:w] = v end
    def h = self[:h]
    def h=(v) self[:h] = v end
    def self.create_as(_x_, _y_, _w_, _h_)
      instance = BLRect.new
      instance[:x] = _x_
      instance[:y] = _y_
      instance[:w] = _w_
      instance[:h] = _h_
      instance
    end
  end

  class BLLine < FFI::Struct
    layout(
      :x0, :double,
      :y0, :double,
      :x1, :double,
      :y1, :double,
    )
    def x0 = self[:x0]
    def x0=(v) self[:x0] = v end
    def y0 = self[:y0]
    def y0=(v) self[:y0] = v end
    def x1 = self[:x1]
    def x1=(v) self[:x1] = v end
    def y1 = self[:y1]
    def y1=(v) self[:y1] = v end
    def self.create_as(_x0_, _y0_, _x1_, _y1_)
      instance = BLLine.new
      instance[:x0] = _x0_
      instance[:y0] = _y0_
      instance[:x1] = _x1_
      instance[:y1] = _y1_
      instance
    end
  end

  class BLTriangle < FFI::Struct
    layout(
      :x0, :double,
      :y0, :double,
      :x1, :double,
      :y1, :double,
      :x2, :double,
      :y2, :double,
    )
    def x0 = self[:x0]
    def x0=(v) self[:x0] = v end
    def y0 = self[:y0]
    def y0=(v) self[:y0] = v end
    def x1 = self[:x1]
    def x1=(v) self[:x1] = v end
    def y1 = self[:y1]
    def y1=(v) self[:y1] = v end
    def x2 = self[:x2]
    def x2=(v) self[:x2] = v end
    def y2 = self[:y2]
    def y2=(v) self[:y2] = v end
    def self.create_as(_x0_, _y0_, _x1_, _y1_, _x2_, _y2_)
      instance = BLTriangle.new
      instance[:x0] = _x0_
      instance[:y0] = _y0_
      instance[:x1] = _x1_
      instance[:y1] = _y1_
      instance[:x2] = _x2_
      instance[:y2] = _y2_
      instance
    end
  end

  class BLRoundRect < FFI::Struct
    layout(
      :x, :double,
      :y, :double,
      :w, :double,
      :h, :double,
      :rx, :double,
      :ry, :double,
    )
    def x = self[:x]
    def x=(v) self[:x] = v end
    def y = self[:y]
    def y=(v) self[:y] = v end
    def w = self[:w]
    def w=(v) self[:w] = v end
    def h = self[:h]
    def h=(v) self[:h] = v end
    def rx = self[:rx]
    def rx=(v) self[:rx] = v end
    def ry = self[:ry]
    def ry=(v) self[:ry] = v end
    def self.create_as(_x_, _y_, _w_, _h_, _rx_, _ry_)
      instance = BLRoundRect.new
      instance[:x] = _x_
      instance[:y] = _y_
      instance[:w] = _w_
      instance[:h] = _h_
      instance[:rx] = _rx_
      instance[:ry] = _ry_
      instance
    end
  end

  class BLCircle < FFI::Struct
    layout(
      :cx, :double,
      :cy, :double,
      :r, :double,
    )
    def cx = self[:cx]
    def cx=(v) self[:cx] = v end
    def cy = self[:cy]
    def cy=(v) self[:cy] = v end
    def r = self[:r]
    def r=(v) self[:r] = v end
    def self.create_as(_cx_, _cy_, _r_)
      instance = BLCircle.new
      instance[:cx] = _cx_
      instance[:cy] = _cy_
      instance[:r] = _r_
      instance
    end
  end

  class BLEllipse < FFI::Struct
    layout(
      :cx, :double,
      :cy, :double,
      :rx, :double,
      :ry, :double,
    )
    def cx = self[:cx]
    def cx=(v) self[:cx] = v end
    def cy = self[:cy]
    def cy=(v) self[:cy] = v end
    def rx = self[:rx]
    def rx=(v) self[:rx] = v end
    def ry = self[:ry]
    def ry=(v) self[:ry] = v end
    def self.create_as(_cx_, _cy_, _rx_, _ry_)
      instance = BLEllipse.new
      instance[:cx] = _cx_
      instance[:cy] = _cy_
      instance[:rx] = _rx_
      instance[:ry] = _ry_
      instance
    end
  end

  class BLArc < FFI::Struct
    layout(
      :cx, :double,
      :cy, :double,
      :rx, :double,
      :ry, :double,
      :start, :double,
      :sweep, :double,
    )
    def cx = self[:cx]
    def cx=(v) self[:cx] = v end
    def cy = self[:cy]
    def cy=(v) self[:cy] = v end
    def rx = self[:rx]
    def rx=(v) self[:rx] = v end
    def ry = self[:ry]
    def ry=(v) self[:ry] = v end
    def start = self[:start]
    def start=(v) self[:start] = v end
    def sweep = self[:sweep]
    def sweep=(v) self[:sweep] = v end
    def self.create_as(_cx_, _cy_, _rx_, _ry_, _start_, _sweep_)
      instance = BLArc.new
      instance[:cx] = _cx_
      instance[:cy] = _cy_
      instance[:rx] = _rx_
      instance[:ry] = _ry_
      instance[:start] = _start_
      instance[:sweep] = _sweep_
      instance
    end
  end


  # Function

  def self.setup_geometry_symbols(output_error = false)
    symbols = [
    ]
    apis = {
    }
    args = {
    }
    retvals = {
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

