# Ruby-Blend2D : Yet another Blend2D wrapper for Ruby
#
# * https://github.com/vaiorabbit/blend2d-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'
require_relative 'blend2d_imagecodec'
require_relative 'blend2d_object'
require_relative 'blend2d_string'

module Blend2D
  extend FFI::Library
  # Define/Macro


  # Enum


  # Typedef


  # Struct

  class BLImageDecoderVirt < FFI::Struct
    layout(
      :base, BLObjectVirtBase,
      :restart, :pointer,
      :readInfo, :pointer,
      :readFrame, :pointer,
    )
  end

  class BLImageDecoderImpl < FFI::Struct
    layout(
      :virt, :pointer,
      :codec, BLImageCodecCore,
      :lastResult, :uint,
      :handle, :pointer,
      :frameIndex, :ulong_long,
      :bufferIndex, :ulong,
    )
  end

  class BLImageDecoderCore < FFI::Struct
    layout(
      :_d, BLObjectDetail,
    )
  end


  # Function

  def self.setup_imagedecoder_symbols(output_error = false)
    symbols = [
      :blImageDecoderInit,
      :blImageDecoderInitMove,
      :blImageDecoderInitWeak,
      :blImageDecoderDestroy,
      :blImageDecoderReset,
      :blImageDecoderAssignMove,
      :blImageDecoderAssignWeak,
      :blImageDecoderRestart,
      :blImageDecoderReadInfo,
      :blImageDecoderReadFrame,
    ]
    apis = {
      :blImageDecoderInit => :blImageDecoderInit,
      :blImageDecoderInitMove => :blImageDecoderInitMove,
      :blImageDecoderInitWeak => :blImageDecoderInitWeak,
      :blImageDecoderDestroy => :blImageDecoderDestroy,
      :blImageDecoderReset => :blImageDecoderReset,
      :blImageDecoderAssignMove => :blImageDecoderAssignMove,
      :blImageDecoderAssignWeak => :blImageDecoderAssignWeak,
      :blImageDecoderRestart => :blImageDecoderRestart,
      :blImageDecoderReadInfo => :blImageDecoderReadInfo,
      :blImageDecoderReadFrame => :blImageDecoderReadFrame,
    }
    args = {
      :blImageDecoderInit => [:pointer],
      :blImageDecoderInitMove => [:pointer, :pointer],
      :blImageDecoderInitWeak => [:pointer, :pointer],
      :blImageDecoderDestroy => [:pointer],
      :blImageDecoderReset => [:pointer],
      :blImageDecoderAssignMove => [:pointer, :pointer],
      :blImageDecoderAssignWeak => [:pointer, :pointer],
      :blImageDecoderRestart => [:pointer],
      :blImageDecoderReadInfo => [:pointer, :pointer, :pointer, :ulong],
      :blImageDecoderReadFrame => [:pointer, :pointer, :pointer, :ulong],
    }
    retvals = {
      :blImageDecoderInit => :uint,
      :blImageDecoderInitMove => :uint,
      :blImageDecoderInitWeak => :uint,
      :blImageDecoderDestroy => :uint,
      :blImageDecoderReset => :uint,
      :blImageDecoderAssignMove => :uint,
      :blImageDecoderAssignWeak => :uint,
      :blImageDecoderRestart => :uint,
      :blImageDecoderReadInfo => :uint,
      :blImageDecoderReadFrame => :uint,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

