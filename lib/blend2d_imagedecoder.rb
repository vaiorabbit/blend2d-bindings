# Ruby-Blend2D : Yet another Blend2D wrapper for Ruby
#
# * https://github.com/vaiorabbit/blend2d-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'
require_relative 'blend2d_imagecodec'
require_relative 'blend2d_object'
require_relative 'blend2d_string'

module Blend2D
  extend FFI::Library
  # Define/Macro


  # Enum


  # Typedef


  # Struct

  class BLImageDecoderVirt < FFI::Struct
    layout(
      :base, BLObjectVirtBase,
      :restart, :pointer,
      :readInfo, :pointer,
      :readFrame, :pointer,
    )
    def base = self[:base]
    def base=(v) self[:base] = v end
    def restart = self[:restart]
    def restart=(v) self[:restart] = v end
    def readInfo = self[:readInfo]
    def readInfo=(v) self[:readInfo] = v end
    def readFrame = self[:readFrame]
    def readFrame=(v) self[:readFrame] = v end
    def self.create_as(_base_, _restart_, _readInfo_, _readFrame_)
      instance = BLImageDecoderVirt.new
      instance[:base] = _base_
      instance[:restart] = _restart_
      instance[:readInfo] = _readInfo_
      instance[:readFrame] = _readFrame_
      instance
    end
  end

  class BLImageDecoderImpl < FFI::Struct
    layout(
      :virt, :pointer,
      :codec, BLImageCodecCore,
      :lastResult, :uint,
      :handle, :pointer,
      :frameIndex, :ulong_long,
      :bufferIndex, :ulong,
    )
    def virt = self[:virt]
    def virt=(v) self[:virt] = v end
    def codec = self[:codec]
    def codec=(v) self[:codec] = v end
    def lastResult = self[:lastResult]
    def lastResult=(v) self[:lastResult] = v end
    def handle = self[:handle]
    def handle=(v) self[:handle] = v end
    def frameIndex = self[:frameIndex]
    def frameIndex=(v) self[:frameIndex] = v end
    def bufferIndex = self[:bufferIndex]
    def bufferIndex=(v) self[:bufferIndex] = v end
    def self.create_as(_virt_, _codec_, _lastResult_, _handle_, _frameIndex_, _bufferIndex_)
      instance = BLImageDecoderImpl.new
      instance[:virt] = _virt_
      instance[:codec] = _codec_
      instance[:lastResult] = _lastResult_
      instance[:handle] = _handle_
      instance[:frameIndex] = _frameIndex_
      instance[:bufferIndex] = _bufferIndex_
      instance
    end
  end

  class BLImageDecoderCore < FFI::Struct
    layout(
      :_d, BLObjectDetail,
    )
    def _d = self[:_d]
    def _d=(v) self[:_d] = v end
    def init() = blImageDecoderInit(self)
    def self.create()
      instance = BLImageDecoderCore.new
      blImageDecoderInit(instance)
      instance
    end
    def initMove(other) = blImageDecoderInitMove(self, other)
    def initWeak(other) = blImageDecoderInitWeak(self, other)
    def destroy() = blImageDecoderDestroy(self)
    def reset() = blImageDecoderReset(self)
    def assignMove(other) = blImageDecoderAssignMove(self, other)
    def assignWeak(other) = blImageDecoderAssignWeak(self, other)
    def restart() = blImageDecoderRestart(self)
    def readInfo(infoOut, data, size) = blImageDecoderReadInfo(self, infoOut, data, size)
    def readFrame(imageOut, data, size) = blImageDecoderReadFrame(self, imageOut, data, size)
  end


  # Function

  def self.setup_imagedecoder_symbols(output_error = false)
    symbols = [
      :blImageDecoderInit,
      :blImageDecoderInitMove,
      :blImageDecoderInitWeak,
      :blImageDecoderDestroy,
      :blImageDecoderReset,
      :blImageDecoderAssignMove,
      :blImageDecoderAssignWeak,
      :blImageDecoderRestart,
      :blImageDecoderReadInfo,
      :blImageDecoderReadFrame,
    ]
    apis = {
      :blImageDecoderInit => :blImageDecoderInit,
      :blImageDecoderInitMove => :blImageDecoderInitMove,
      :blImageDecoderInitWeak => :blImageDecoderInitWeak,
      :blImageDecoderDestroy => :blImageDecoderDestroy,
      :blImageDecoderReset => :blImageDecoderReset,
      :blImageDecoderAssignMove => :blImageDecoderAssignMove,
      :blImageDecoderAssignWeak => :blImageDecoderAssignWeak,
      :blImageDecoderRestart => :blImageDecoderRestart,
      :blImageDecoderReadInfo => :blImageDecoderReadInfo,
      :blImageDecoderReadFrame => :blImageDecoderReadFrame,
    }
    args = {
      :blImageDecoderInit => [:pointer],
      :blImageDecoderInitMove => [:pointer, :pointer],
      :blImageDecoderInitWeak => [:pointer, :pointer],
      :blImageDecoderDestroy => [:pointer],
      :blImageDecoderReset => [:pointer],
      :blImageDecoderAssignMove => [:pointer, :pointer],
      :blImageDecoderAssignWeak => [:pointer, :pointer],
      :blImageDecoderRestart => [:pointer],
      :blImageDecoderReadInfo => [:pointer, :pointer, :pointer, :ulong],
      :blImageDecoderReadFrame => [:pointer, :pointer, :pointer, :ulong],
    }
    retvals = {
      :blImageDecoderInit => :uint,
      :blImageDecoderInitMove => :uint,
      :blImageDecoderInitWeak => :uint,
      :blImageDecoderDestroy => :uint,
      :blImageDecoderReset => :uint,
      :blImageDecoderAssignMove => :uint,
      :blImageDecoderAssignWeak => :uint,
      :blImageDecoderRestart => :uint,
      :blImageDecoderReadInfo => :uint,
      :blImageDecoderReadFrame => :uint,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

