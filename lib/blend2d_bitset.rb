# Ruby-Blend2D : Yet another Blend2D wrapper for Ruby
#
# * https://github.com/vaiorabbit/blend2d-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'
require_relative 'blend2d_object'

module Blend2D
  extend FFI::Library
  # Define/Macro


  # Enum

  BL_BIT_SET_INVALID_INDEX = 4294967295
  BL_BIT_SET_RANGE_MASK = 2147483648
  BL_BIT_SET_SEGMENT_WORD_COUNT = 4

  # Typedef

  typedef :int, :BLBitSetConstants

  # Struct

  class BLBitSetSegment < FFI::Struct
    layout(
      :_startWord, :uint,
      :_data, [:uint, 4],
    )
  end

  class BLBitSetData < FFI::Struct
    layout(
      :segmentData, :pointer,
      :segmentCount, :uint,
      :ssoSegments, [BLBitSetSegment, 3],
    )
  end

  class BLBitSetCore < FFI::Struct
    layout(
      :_d, BLObjectDetail,
    )
  end

  class BLBitSetBuilderCore < FFI::Struct
    layout(
      :_areaShift, :uint,
      :_areaIndex, :uint,
    )
  end

  class BLBitSetImpl < FFI::Struct
    layout(
      :segmentCount, :uint,
      :segmentCapacity, :uint,
    )
  end


  # Function

  def self.setup_bitset_symbols(output_error = false)
    symbols = [
      :blBitSetInit,
      :blBitSetInitMove,
      :blBitSetInitWeak,
      :blBitSetInitRange,
      :blBitSetDestroy,
      :blBitSetReset,
      :blBitSetAssignMove,
      :blBitSetAssignWeak,
      :blBitSetAssignDeep,
      :blBitSetAssignRange,
      :blBitSetAssignWords,
      :blBitSetIsEmpty,
      :blBitSetGetData,
      :blBitSetGetSegmentCount,
      :blBitSetGetSegmentCapacity,
      :blBitSetGetCardinality,
      :blBitSetGetCardinalityInRange,
      :blBitSetHasBit,
      :blBitSetHasBitsInRange,
      :blBitSetSubsumes,
      :blBitSetIntersects,
      :blBitSetGetRange,
      :blBitSetEquals,
      :blBitSetCompare,
      :blBitSetClear,
      :blBitSetShrink,
      :blBitSetOptimize,
      :blBitSetChop,
      :blBitSetAddBit,
      :blBitSetAddRange,
      :blBitSetAddWords,
      :blBitSetClearBit,
      :blBitSetClearRange,
      :blBitSetBuilderCommit,
      :blBitSetBuilderAddRange,
    ]
    apis = {
      :blBitSetInit => :blBitSetInit,
      :blBitSetInitMove => :blBitSetInitMove,
      :blBitSetInitWeak => :blBitSetInitWeak,
      :blBitSetInitRange => :blBitSetInitRange,
      :blBitSetDestroy => :blBitSetDestroy,
      :blBitSetReset => :blBitSetReset,
      :blBitSetAssignMove => :blBitSetAssignMove,
      :blBitSetAssignWeak => :blBitSetAssignWeak,
      :blBitSetAssignDeep => :blBitSetAssignDeep,
      :blBitSetAssignRange => :blBitSetAssignRange,
      :blBitSetAssignWords => :blBitSetAssignWords,
      :blBitSetIsEmpty => :blBitSetIsEmpty,
      :blBitSetGetData => :blBitSetGetData,
      :blBitSetGetSegmentCount => :blBitSetGetSegmentCount,
      :blBitSetGetSegmentCapacity => :blBitSetGetSegmentCapacity,
      :blBitSetGetCardinality => :blBitSetGetCardinality,
      :blBitSetGetCardinalityInRange => :blBitSetGetCardinalityInRange,
      :blBitSetHasBit => :blBitSetHasBit,
      :blBitSetHasBitsInRange => :blBitSetHasBitsInRange,
      :blBitSetSubsumes => :blBitSetSubsumes,
      :blBitSetIntersects => :blBitSetIntersects,
      :blBitSetGetRange => :blBitSetGetRange,
      :blBitSetEquals => :blBitSetEquals,
      :blBitSetCompare => :blBitSetCompare,
      :blBitSetClear => :blBitSetClear,
      :blBitSetShrink => :blBitSetShrink,
      :blBitSetOptimize => :blBitSetOptimize,
      :blBitSetChop => :blBitSetChop,
      :blBitSetAddBit => :blBitSetAddBit,
      :blBitSetAddRange => :blBitSetAddRange,
      :blBitSetAddWords => :blBitSetAddWords,
      :blBitSetClearBit => :blBitSetClearBit,
      :blBitSetClearRange => :blBitSetClearRange,
      :blBitSetBuilderCommit => :blBitSetBuilderCommit,
      :blBitSetBuilderAddRange => :blBitSetBuilderAddRange,
    }
    args = {
      :blBitSetInit => [:pointer],
      :blBitSetInitMove => [:pointer, :pointer],
      :blBitSetInitWeak => [:pointer, :pointer],
      :blBitSetInitRange => [:pointer, :uint, :uint],
      :blBitSetDestroy => [:pointer],
      :blBitSetReset => [:pointer],
      :blBitSetAssignMove => [:pointer, :pointer],
      :blBitSetAssignWeak => [:pointer, :pointer],
      :blBitSetAssignDeep => [:pointer, :pointer],
      :blBitSetAssignRange => [:pointer, :uint, :uint],
      :blBitSetAssignWords => [:pointer, :uint, :pointer, :uint],
      :blBitSetIsEmpty => [:pointer],
      :blBitSetGetData => [:pointer, :pointer],
      :blBitSetGetSegmentCount => [:pointer],
      :blBitSetGetSegmentCapacity => [:pointer],
      :blBitSetGetCardinality => [:pointer],
      :blBitSetGetCardinalityInRange => [:pointer, :uint, :uint],
      :blBitSetHasBit => [:pointer, :uint],
      :blBitSetHasBitsInRange => [:pointer, :uint, :uint],
      :blBitSetSubsumes => [:pointer, :pointer],
      :blBitSetIntersects => [:pointer, :pointer],
      :blBitSetGetRange => [:pointer, :pointer, :pointer],
      :blBitSetEquals => [:pointer, :pointer],
      :blBitSetCompare => [:pointer, :pointer],
      :blBitSetClear => [:pointer],
      :blBitSetShrink => [:pointer],
      :blBitSetOptimize => [:pointer],
      :blBitSetChop => [:pointer, :uint, :uint],
      :blBitSetAddBit => [:pointer, :uint],
      :blBitSetAddRange => [:pointer, :uint, :uint],
      :blBitSetAddWords => [:pointer, :uint, :pointer, :uint],
      :blBitSetClearBit => [:pointer, :uint],
      :blBitSetClearRange => [:pointer, :uint, :uint],
      :blBitSetBuilderCommit => [:pointer, :pointer, :uint],
      :blBitSetBuilderAddRange => [:pointer, :pointer, :uint, :uint],
    }
    retvals = {
      :blBitSetInit => :uint,
      :blBitSetInitMove => :uint,
      :blBitSetInitWeak => :uint,
      :blBitSetInitRange => :uint,
      :blBitSetDestroy => :uint,
      :blBitSetReset => :uint,
      :blBitSetAssignMove => :uint,
      :blBitSetAssignWeak => :uint,
      :blBitSetAssignDeep => :uint,
      :blBitSetAssignRange => :uint,
      :blBitSetAssignWords => :uint,
      :blBitSetIsEmpty => :int,
      :blBitSetGetData => :uint,
      :blBitSetGetSegmentCount => :uint,
      :blBitSetGetSegmentCapacity => :uint,
      :blBitSetGetCardinality => :uint,
      :blBitSetGetCardinalityInRange => :uint,
      :blBitSetHasBit => :int,
      :blBitSetHasBitsInRange => :int,
      :blBitSetSubsumes => :int,
      :blBitSetIntersects => :int,
      :blBitSetGetRange => :int,
      :blBitSetEquals => :int,
      :blBitSetCompare => :int,
      :blBitSetClear => :uint,
      :blBitSetShrink => :uint,
      :blBitSetOptimize => :uint,
      :blBitSetChop => :uint,
      :blBitSetAddBit => :uint,
      :blBitSetAddRange => :uint,
      :blBitSetAddWords => :uint,
      :blBitSetClearBit => :uint,
      :blBitSetClearRange => :uint,
      :blBitSetBuilderCommit => :uint,
      :blBitSetBuilderAddRange => :uint,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

