# Ruby-Blend2D : Yet another Blend2D wrapper for Ruby
#
# * https://github.com/vaiorabbit/blend2d-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'
require_relative 'blend2d_array'

module Blend2D
  extend FFI::Library
  # Define/Macro


  # Enum

  BL_FORMAT_NONE = 0
  BL_FORMAT_PRGB32 = 1
  BL_FORMAT_XRGB32 = 2
  BL_FORMAT_A8 = 3
  BL_FORMAT_MAX_VALUE = 3
  BL_FORMAT_FORCE_UINT = 4294967295
  BL_FORMAT_NO_FLAGS = 0
  BL_FORMAT_FLAG_RGB = 1
  BL_FORMAT_FLAG_ALPHA = 2
  BL_FORMAT_FLAG_RGBA = 3
  BL_FORMAT_FLAG_LUM = 4
  BL_FORMAT_FLAG_LUMA = 6
  BL_FORMAT_FLAG_INDEXED = 16
  BL_FORMAT_FLAG_PREMULTIPLIED = 256
  BL_FORMAT_FLAG_BYTE_SWAP = 512
  BL_FORMAT_FLAG_BYTE_ALIGNED = 65536
  BL_FORMAT_FLAG_UNDEFINED_BITS = 131072
  BL_FORMAT_FLAG_LE = 0
  BL_FORMAT_FLAG_BE = 512
  BL_FORMAT_FLAG_FORCE_UINT = 4294967295

  # Typedef


  class BLFormatInfo_union_sizes_shift < FFI::Struct
    layout(
      :sizes, [:uchar, 4],
      :shifts, [:uchar, 4],
    )
  end

  class BLFormatInfo_union_rgba_sizes_shift < FFI::Struct
    layout(
      :rSize, :uchar,
      :gSize, :uchar,
      :bSize, :uchar,
      :aSize, :uchar,
      :rShift, :uchar,
      :gShift, :uchar,
      :bShift, :uchar,
      :aShift, :uchar,
    )
  end

  class BLFormatInfo_union < FFI::Union
    layout(
      :sizes_shifts, BLFormatInfo_union_sizes_shift,
      :rgba_sizes_shift, BLFormatInfo_union_rgba_sizes_shift,
      :palette, :pointer,
    )
  end

  class BLFormatInfo < FFI::Struct
    layout(
      :depth, :uint,
      :flags, :int,
      :union, BLFormatInfo_union,
    )
  end

  typedef :int, :BLFormat
  typedef :int, :BLFormatFlags

  # Struct


  # Function

  def self.setup_format_symbols(output_error = false)
    symbols = [
      :blFormatInfoQuery,
      :blFormatInfoSanitize,
    ]
    apis = {
      :blFormatInfoQuery => :blFormatInfoQuery,
      :blFormatInfoSanitize => :blFormatInfoSanitize,
    }
    args = {
      :blFormatInfoQuery => [:pointer, :int],
      :blFormatInfoSanitize => [:pointer],
    }
    retvals = {
      :blFormatInfoQuery => :uint,
      :blFormatInfoSanitize => :uint,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

