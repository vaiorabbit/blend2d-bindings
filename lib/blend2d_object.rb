# Ruby-Blend2D : Yet another Blend2D wrapper for Ruby
#
# * https://github.com/vaiorabbit/blend2d-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'
require_relative 'blend2d_rgba'

module Blend2D
  extend FFI::Library
  # Define/Macro


  # Enum

  BL_OBJECT_INFO_P_SHIFT = 0
  BL_OBJECT_INFO_Q_SHIFT = 8
  BL_OBJECT_INFO_C_SHIFT = 8
  BL_OBJECT_INFO_B_SHIFT = 12
  BL_OBJECT_INFO_A_SHIFT = 16
  BL_OBJECT_INFO_TYPE_SHIFT = 22
  BL_OBJECT_INFO_R_SHIFT = 29
  BL_OBJECT_INFO_D_SHIFT = 30
  BL_OBJECT_INFO_M_SHIFT = 31
  BL_OBJECT_INFO_SHIFT_FORCE_UINT = 4294967295
  BL_OBJECT_INFO_P_MASK = 255
  BL_OBJECT_INFO_Q_MASK = 65280
  BL_OBJECT_INFO_C_MASK = 3840
  BL_OBJECT_INFO_B_MASK = 61440
  BL_OBJECT_INFO_A_MASK = 4128768
  BL_OBJECT_INFO_FIELDS_MASK = 4194303
  BL_OBJECT_INFO_TYPE_MASK = 532676608
  BL_OBJECT_INFO_R_FLAG = 536870912
  BL_OBJECT_INFO_D_FLAG = 1073741824
  BL_OBJECT_INFO_M_FLAG = 2147483648
  BL_OBJECT_INFO_MD_FLAGS = 3221225472
  BL_OBJECT_INFO_MDR_FLAGS = 3758096384
  BL_OBJECT_INFO_BITS_FORCE_UINT = 4294967295
  BL_OBJECT_TYPE_RGBA = 0
  BL_OBJECT_TYPE_RGBA32 = 1
  BL_OBJECT_TYPE_RGBA64 = 2
  BL_OBJECT_TYPE_NULL = 3
  BL_OBJECT_TYPE_PATTERN = 4
  BL_OBJECT_TYPE_GRADIENT = 5
  BL_OBJECT_TYPE_IMAGE = 9
  BL_OBJECT_TYPE_PATH = 10
  BL_OBJECT_TYPE_FONT = 16
  BL_OBJECT_TYPE_FONT_FEATURE_SETTINGS = 17
  BL_OBJECT_TYPE_FONT_VARIATION_SETTINGS = 18
  BL_OBJECT_TYPE_BIT_ARRAY = 25
  BL_OBJECT_TYPE_BIT_SET = 26
  BL_OBJECT_TYPE_BOOL = 28
  BL_OBJECT_TYPE_INT64 = 29
  BL_OBJECT_TYPE_UINT64 = 30
  BL_OBJECT_TYPE_DOUBLE = 31
  BL_OBJECT_TYPE_STRING = 32
  BL_OBJECT_TYPE_ARRAY_OBJECT = 33
  BL_OBJECT_TYPE_ARRAY_INT8 = 34
  BL_OBJECT_TYPE_ARRAY_UINT8 = 35
  BL_OBJECT_TYPE_ARRAY_INT16 = 36
  BL_OBJECT_TYPE_ARRAY_UINT16 = 37
  BL_OBJECT_TYPE_ARRAY_INT32 = 38
  BL_OBJECT_TYPE_ARRAY_UINT32 = 39
  BL_OBJECT_TYPE_ARRAY_INT64 = 40
  BL_OBJECT_TYPE_ARRAY_UINT64 = 41
  BL_OBJECT_TYPE_ARRAY_FLOAT32 = 42
  BL_OBJECT_TYPE_ARRAY_FLOAT64 = 43
  BL_OBJECT_TYPE_ARRAY_STRUCT_1 = 44
  BL_OBJECT_TYPE_ARRAY_STRUCT_2 = 45
  BL_OBJECT_TYPE_ARRAY_STRUCT_3 = 46
  BL_OBJECT_TYPE_ARRAY_STRUCT_4 = 47
  BL_OBJECT_TYPE_ARRAY_STRUCT_6 = 48
  BL_OBJECT_TYPE_ARRAY_STRUCT_8 = 49
  BL_OBJECT_TYPE_ARRAY_STRUCT_10 = 50
  BL_OBJECT_TYPE_ARRAY_STRUCT_12 = 51
  BL_OBJECT_TYPE_ARRAY_STRUCT_16 = 52
  BL_OBJECT_TYPE_ARRAY_STRUCT_20 = 53
  BL_OBJECT_TYPE_ARRAY_STRUCT_24 = 54
  BL_OBJECT_TYPE_ARRAY_STRUCT_32 = 55
  BL_OBJECT_TYPE_CONTEXT = 100
  BL_OBJECT_TYPE_IMAGE_CODEC = 101
  BL_OBJECT_TYPE_IMAGE_DECODER = 102
  BL_OBJECT_TYPE_IMAGE_ENCODER = 103
  BL_OBJECT_TYPE_FONT_FACE = 104
  BL_OBJECT_TYPE_FONT_DATA = 105
  BL_OBJECT_TYPE_FONT_MANAGER = 106
  BL_OBJECT_TYPE_MIN_ARRAY = 33
  BL_OBJECT_TYPE_MAX_ARRAY = 55
  BL_OBJECT_TYPE_MIN_STYLE = 0
  BL_OBJECT_TYPE_MAX_STYLE = 5
  BL_OBJECT_TYPE_MIN_VIRTUAL = 100
  BL_OBJECT_TYPE_MAX_VIRTUAL = 127
  BL_OBJECT_TYPE_MAX_VALUE = 127
  BL_OBJECT_TYPE_FORCE_UINT = 4294967295

  # Typedef


  class BLObjectInfo < FFI::Struct
    layout(
      :bits, :uint,
    )
  end

  class BLObjectDetail_struct < FFI::Struct
    layout(
        :u32_data_overlap, [:uint, 2],
        :impl_payload, :uint,
        :info, BLObjectInfo,
    )
  end

  class BLObjectDetail < FFI::Union
    layout(
      :impl, :pointer,
      :char_data, [:char, 16],
      :i8_data, [:char, 16],
      :u8_data, [:uchar, 16],
      :i16_data, [:short, 8],
      :u16_data, [:ushort, 8],
      :i32_data, [:int, 4],
      :u32_data, [:uint, 4],
      :i64_data, [:long_long, 2],
      :u64_data, [:ulong_long, 2],
      :f32_data, [:float, 4],
      :f64_data, [:double, 2],
      :rgba, BLRgba,
      :rgba32, BLRgba32,
      :rgba64, BLRgba64,
      :struct, BLObjectDetail_struct,
    )
  end

  typedef :int, :BLObjectInfoShift
  typedef :int, :BLObjectInfoBits
  typedef :int, :BLObjectType
  callback :BLDestroyExternalDataFunc, [:pointer, :pointer, :pointer], :void

  # Struct

  class BLObjectVirtBase < FFI::Struct
    layout(
      :destroy, :pointer,
      :getProperty, :pointer,
      :setProperty, :pointer,
    )
    def destroy = self[:destroy]
    def destroy=(v) self[:destroy] = v end
    def getProperty = self[:getProperty]
    def getProperty=(v) self[:getProperty] = v end
    def setProperty = self[:setProperty]
    def setProperty=(v) self[:setProperty] = v end
    def self.create_as(_destroy_, _getProperty_, _setProperty_)
      instance = BLObjectVirtBase.new
      instance[:destroy] = _destroy_
      instance[:getProperty] = _getProperty_
      instance[:setProperty] = _setProperty_
      instance
    end
  end

  class BLObjectVirt < FFI::Struct
    layout(
      :base, BLObjectVirtBase,
    )
    def base = self[:base]
    def base=(v) self[:base] = v end
    def self.create_as(_base_)
      instance = BLObjectVirt.new
      instance[:base] = _base_
      instance
    end
  end

  class BLObjectCore < FFI::Struct
    layout(
      :_d, BLObjectDetail,
    )
    def _d = self[:_d]
    def _d=(v) self[:_d] = v end
    def allocImpl(objectInfo, implSize) = blObjectAllocImpl(self, objectInfo, implSize)
    def allocImplAligned(objectInfo, implSize, implAlignment) = blObjectAllocImplAligned(self, objectInfo, implSize, implAlignment)
    def allocImplExternal(objectInfo, implSize, immutable, destroyFunc, userData) = blObjectAllocImplExternal(self, objectInfo, implSize, immutable, destroyFunc, userData)
    def freeImpl() = blObjectFreeImpl(impl)
    def initMove(other) = blObjectInitMove(self, other)
    def initWeak(other) = blObjectInitWeak(self, other)
    def reset() = blObjectReset(self)
    def assignMove(other) = blObjectAssignMove(self, other)
    def assignWeak(other) = blObjectAssignWeak(self, other)
    def getProperty(name, nameSize, valueOut) = blObjectGetProperty(self, name, nameSize, valueOut)
    def getPropertyBool(name, nameSize, valueOut) = blObjectGetPropertyBool(self, name, nameSize, valueOut)
    def getPropertyInt32(name, nameSize, valueOut) = blObjectGetPropertyInt32(self, name, nameSize, valueOut)
    def getPropertyInt64(name, nameSize, valueOut) = blObjectGetPropertyInt64(self, name, nameSize, valueOut)
    def getPropertyUInt32(name, nameSize, valueOut) = blObjectGetPropertyUInt32(self, name, nameSize, valueOut)
    def getPropertyUInt64(name, nameSize, valueOut) = blObjectGetPropertyUInt64(self, name, nameSize, valueOut)
    def getPropertyDouble(name, nameSize, valueOut) = blObjectGetPropertyDouble(self, name, nameSize, valueOut)
    def setProperty(name, nameSize, value) = blObjectSetProperty(self, name, nameSize, value)
    def setPropertyBool(name, nameSize, value) = blObjectSetPropertyBool(self, name, nameSize, value)
    def setPropertyInt32(name, nameSize, value) = blObjectSetPropertyInt32(self, name, nameSize, value)
    def setPropertyInt64(name, nameSize, value) = blObjectSetPropertyInt64(self, name, nameSize, value)
    def setPropertyUInt32(name, nameSize, value) = blObjectSetPropertyUInt32(self, name, nameSize, value)
    def setPropertyUInt64(name, nameSize, value) = blObjectSetPropertyUInt64(self, name, nameSize, value)
    def setPropertyDouble(name, nameSize, value) = blObjectSetPropertyDouble(self, name, nameSize, value)
    def self.create_as(__d_)
      instance = BLObjectCore.new
      instance[:_d] = __d_
      instance
    end
  end


  # Function

  def self.setup_object_symbols(output_error = false)
    symbols = [
      :blObjectAllocImpl,
      :blObjectAllocImplAligned,
      :blObjectAllocImplExternal,
      :blObjectFreeImpl,
      :blObjectInitMove,
      :blObjectInitWeak,
      :blObjectReset,
      :blObjectAssignMove,
      :blObjectAssignWeak,
      :blObjectGetProperty,
      :blObjectGetPropertyBool,
      :blObjectGetPropertyInt32,
      :blObjectGetPropertyInt64,
      :blObjectGetPropertyUInt32,
      :blObjectGetPropertyUInt64,
      :blObjectGetPropertyDouble,
      :blObjectSetProperty,
      :blObjectSetPropertyBool,
      :blObjectSetPropertyInt32,
      :blObjectSetPropertyInt64,
      :blObjectSetPropertyUInt32,
      :blObjectSetPropertyUInt64,
      :blObjectSetPropertyDouble,
    ]
    apis = {
      :blObjectAllocImpl => :blObjectAllocImpl,
      :blObjectAllocImplAligned => :blObjectAllocImplAligned,
      :blObjectAllocImplExternal => :blObjectAllocImplExternal,
      :blObjectFreeImpl => :blObjectFreeImpl,
      :blObjectInitMove => :blObjectInitMove,
      :blObjectInitWeak => :blObjectInitWeak,
      :blObjectReset => :blObjectReset,
      :blObjectAssignMove => :blObjectAssignMove,
      :blObjectAssignWeak => :blObjectAssignWeak,
      :blObjectGetProperty => :blObjectGetProperty,
      :blObjectGetPropertyBool => :blObjectGetPropertyBool,
      :blObjectGetPropertyInt32 => :blObjectGetPropertyInt32,
      :blObjectGetPropertyInt64 => :blObjectGetPropertyInt64,
      :blObjectGetPropertyUInt32 => :blObjectGetPropertyUInt32,
      :blObjectGetPropertyUInt64 => :blObjectGetPropertyUInt64,
      :blObjectGetPropertyDouble => :blObjectGetPropertyDouble,
      :blObjectSetProperty => :blObjectSetProperty,
      :blObjectSetPropertyBool => :blObjectSetPropertyBool,
      :blObjectSetPropertyInt32 => :blObjectSetPropertyInt32,
      :blObjectSetPropertyInt64 => :blObjectSetPropertyInt64,
      :blObjectSetPropertyUInt32 => :blObjectSetPropertyUInt32,
      :blObjectSetPropertyUInt64 => :blObjectSetPropertyUInt64,
      :blObjectSetPropertyDouble => :blObjectSetPropertyDouble,
    }
    args = {
      :blObjectAllocImpl => [:pointer, :uint, :ulong],
      :blObjectAllocImplAligned => [:pointer, :uint, :ulong, :ulong],
      :blObjectAllocImplExternal => [:pointer, :uint, :ulong, :int, :BLDestroyExternalDataFunc, :pointer],
      :blObjectFreeImpl => [:pointer],
      :blObjectInitMove => [:pointer, :pointer],
      :blObjectInitWeak => [:pointer, :pointer],
      :blObjectReset => [:pointer],
      :blObjectAssignMove => [:pointer, :pointer],
      :blObjectAssignWeak => [:pointer, :pointer],
      :blObjectGetProperty => [:pointer, :pointer, :ulong, :pointer],
      :blObjectGetPropertyBool => [:pointer, :pointer, :ulong, :pointer],
      :blObjectGetPropertyInt32 => [:pointer, :pointer, :ulong, :pointer],
      :blObjectGetPropertyInt64 => [:pointer, :pointer, :ulong, :pointer],
      :blObjectGetPropertyUInt32 => [:pointer, :pointer, :ulong, :pointer],
      :blObjectGetPropertyUInt64 => [:pointer, :pointer, :ulong, :pointer],
      :blObjectGetPropertyDouble => [:pointer, :pointer, :ulong, :pointer],
      :blObjectSetProperty => [:pointer, :pointer, :ulong, :pointer],
      :blObjectSetPropertyBool => [:pointer, :pointer, :ulong, :int],
      :blObjectSetPropertyInt32 => [:pointer, :pointer, :ulong, :int],
      :blObjectSetPropertyInt64 => [:pointer, :pointer, :ulong, :long_long],
      :blObjectSetPropertyUInt32 => [:pointer, :pointer, :ulong, :uint],
      :blObjectSetPropertyUInt64 => [:pointer, :pointer, :ulong, :ulong_long],
      :blObjectSetPropertyDouble => [:pointer, :pointer, :ulong, :double],
    }
    retvals = {
      :blObjectAllocImpl => :uint,
      :blObjectAllocImplAligned => :uint,
      :blObjectAllocImplExternal => :uint,
      :blObjectFreeImpl => :uint,
      :blObjectInitMove => :uint,
      :blObjectInitWeak => :uint,
      :blObjectReset => :uint,
      :blObjectAssignMove => :uint,
      :blObjectAssignWeak => :uint,
      :blObjectGetProperty => :uint,
      :blObjectGetPropertyBool => :uint,
      :blObjectGetPropertyInt32 => :uint,
      :blObjectGetPropertyInt64 => :uint,
      :blObjectGetPropertyUInt32 => :uint,
      :blObjectGetPropertyUInt64 => :uint,
      :blObjectGetPropertyDouble => :uint,
      :blObjectSetProperty => :uint,
      :blObjectSetPropertyBool => :uint,
      :blObjectSetPropertyInt32 => :uint,
      :blObjectSetPropertyInt64 => :uint,
      :blObjectSetPropertyUInt32 => :uint,
      :blObjectSetPropertyUInt64 => :uint,
      :blObjectSetPropertyDouble => :uint,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

