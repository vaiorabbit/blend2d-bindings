# Ruby-Blend2D : Yet another Blend2D wrapper for Ruby
#
# * https://github.com/vaiorabbit/blend2d-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module Blend2D
  extend FFI::Library
  # Define/Macro


  # Enum

  BL_RUNTIME_MAX_IMAGE_SIZE = 65535
  BL_RUNTIME_MAX_THREAD_COUNT = 32
  BL_RUNTIME_INFO_TYPE_BUILD = 0
  BL_RUNTIME_INFO_TYPE_SYSTEM = 1
  BL_RUNTIME_INFO_TYPE_RESOURCE = 2
  BL_RUNTIME_INFO_TYPE_MAX_VALUE = 2
  BL_RUNTIME_INFO_TYPE_FORCE_UINT = 4294967295
  BL_RUNTIME_BUILD_TYPE_DEBUG = 0
  BL_RUNTIME_BUILD_TYPE_RELEASE = 1
  BL_RUNTIME_BUILD_TYPE_FORCE_UINT = 4294967295
  BL_RUNTIME_CPU_ARCH_UNKNOWN = 0
  BL_RUNTIME_CPU_ARCH_X86 = 1
  BL_RUNTIME_CPU_ARCH_ARM = 2
  BL_RUNTIME_CPU_ARCH_MIPS = 3
  BL_RUNTIME_CPU_ARCH_FORCE_UINT = 4294967295
  BL_RUNTIME_CPU_FEATURE_X86_SSE2 = 1
  BL_RUNTIME_CPU_FEATURE_X86_SSE3 = 2
  BL_RUNTIME_CPU_FEATURE_X86_SSSE3 = 4
  BL_RUNTIME_CPU_FEATURE_X86_SSE4_1 = 8
  BL_RUNTIME_CPU_FEATURE_X86_SSE4_2 = 16
  BL_RUNTIME_CPU_FEATURE_X86_AVX = 32
  BL_RUNTIME_CPU_FEATURE_X86_AVX2 = 64
  BL_RUNTIME_CPU_FEATURE_X86_AVX512 = 128
  BL_RUNTIME_CPU_FEATURE_FORCE_UINT = 4294967295
  BL_RUNTIME_CLEANUP_NO_FLAGS = 0
  BL_RUNTIME_CLEANUP_OBJECT_POOL = 1
  BL_RUNTIME_CLEANUP_ZEROED_POOL = 2
  BL_RUNTIME_CLEANUP_THREAD_POOL = 16
  BL_RUNTIME_CLEANUP_EVERYTHING = 4294967295
  BL_RUNTIME_CLEANUP_FLAG_FORCE_UINT = 4294967295

  # Typedef

  typedef :int, :BLRuntimeLimits
  typedef :int, :BLRuntimeInfoType
  typedef :int, :BLRuntimeBuildType
  typedef :int, :BLRuntimeCpuArch
  typedef :int, :BLRuntimeCpuFeatures
  typedef :int, :BLRuntimeCleanupFlags

  # Struct

  class BLRuntimeBuildInfo < FFI::Struct
    layout(
      :majorVersion, :uint,
      :minorVersion, :uint,
      :patchVersion, :uint,
      :buildType, :uint,
      :baselineCpuFeatures, :uint,
      :supportedCpuFeatures, :uint,
      :maxImageSize, :uint,
      :maxThreadCount, :uint,
      :reserved, [:uint, 2],
      :compilerInfo, [:char, 32],
    )
  end

  class BLRuntimeSystemInfo < FFI::Struct
    layout(
      :cpuArch, :uint,
      :cpuFeatures, :uint,
      :coreCount, :uint,
      :threadCount, :uint,
      :threadStackSize, :uint,
      :removed, :uint,
      :allocationGranularity, :uint,
      :reserved, [:uint, 5],
    )
  end

  class BLRuntimeResourceInfo < FFI::Struct
    layout(
      :vmUsed, :ulong,
      :vmReserved, :ulong,
      :vmOverhead, :ulong,
      :vmBlockCount, :ulong,
      :zmUsed, :ulong,
      :zmReserved, :ulong,
      :zmOverhead, :ulong,
      :zmBlockCount, :ulong,
      :dynamicPipelineCount, :ulong,
      :reserved, [:ulong, 7],
    )
  end


  # Function

  def self.setup_runtime_symbols(output_error = false)
    symbols = [
      :blRuntimeInit,
      :blRuntimeShutdown,
      :blRuntimeCleanup,
      :blRuntimeQueryInfo,
      :blRuntimeMessageOut,
      :blRuntimeMessageFmt,
      :blRuntimeMessageVFmt,
      :blResultFromPosixError,
    ]
    apis = {
      :blRuntimeInit => :blRuntimeInit,
      :blRuntimeShutdown => :blRuntimeShutdown,
      :blRuntimeCleanup => :blRuntimeCleanup,
      :blRuntimeQueryInfo => :blRuntimeQueryInfo,
      :blRuntimeMessageOut => :blRuntimeMessageOut,
      :blRuntimeMessageFmt => :blRuntimeMessageFmt,
      :blRuntimeMessageVFmt => :blRuntimeMessageVFmt,
      :blResultFromPosixError => :blResultFromPosixError,
    }
    args = {
      :blRuntimeInit => [],
      :blRuntimeShutdown => [],
      :blRuntimeCleanup => [:int],
      :blRuntimeQueryInfo => [:int, :pointer],
      :blRuntimeMessageOut => [:pointer],
      :blRuntimeMessageFmt => [:pointer],
      :blRuntimeMessageVFmt => [:pointer, :int],
      :blResultFromPosixError => [:int],
    }
    retvals = {
      :blRuntimeInit => :uint,
      :blRuntimeShutdown => :uint,
      :blRuntimeCleanup => :uint,
      :blRuntimeQueryInfo => :uint,
      :blRuntimeMessageOut => :uint,
      :blRuntimeMessageFmt => :uint,
      :blRuntimeMessageVFmt => :uint,
      :blResultFromPosixError => :uint,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

