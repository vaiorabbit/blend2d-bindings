# Ruby-Blend2D : Yet another Blend2D wrapper for Ruby
#
# * https://github.com/vaiorabbit/blend2d-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'
require_relative 'blend2d_array'
require_relative 'blend2d_bitset'
require_relative 'blend2d_filesystem'
require_relative 'blend2d_fontdefs'
require_relative 'blend2d_geometry'
require_relative 'blend2d_glyphbuffer'
require_relative 'blend2d_object'
require_relative 'blend2d_path'
require_relative 'blend2d_string'

module Blend2D
  extend FFI::Library
  # Define/Macro


  # Enum


  # Typedef


  # Struct

  class BLFontFeatureSettingsCore < FFI::Struct
    layout(
      :_d, BLObjectDetail,
    )
    def _d = self[:_d]
    def _d=(v) self[:_d] = v end
    def init() = blFontFeatureSettingsInit(self)
    def self.create()
      instance = BLFontFeatureSettingsCore.new
      blFontFeatureSettingsInit(instance)
      instance
    end
    def initMove(other) = blFontFeatureSettingsInitMove(self, other)
    def initWeak(other) = blFontFeatureSettingsInitWeak(self, other)
    def destroy() = blFontFeatureSettingsDestroy(self)
    def reset() = blFontFeatureSettingsReset(self)
    def clear() = blFontFeatureSettingsClear(self)
    def shrink() = blFontFeatureSettingsShrink(self)
    def assignMove(other) = blFontFeatureSettingsAssignMove(self, other)
    def assignWeak(other) = blFontFeatureSettingsAssignWeak(self, other)
    def getSize() = blFontFeatureSettingsGetSize(self)
    def getCapacity() = blFontFeatureSettingsGetCapacity(self)
    def getView(out) = blFontFeatureSettingsGetView(self, out)
    def hasValue(featureTag) = blFontFeatureSettingsHasValue(self, featureTag)
    def getValue(featureTag) = blFontFeatureSettingsGetValue(self, featureTag)
    def setValue(featureTag, value) = blFontFeatureSettingsSetValue(self, featureTag, value)
    def removeValue(featureTag) = blFontFeatureSettingsRemoveValue(self, featureTag)
    def equals(b) = blFontFeatureSettingsEquals(a, b)
  end

  class BLFontFeatureSettingsImpl < FFI::Struct
    layout(
      :data, :pointer,
      :size, :ulong_long,
      :capacity, :ulong_long,
    )
    def data = self[:data]
    def data=(v) self[:data] = v end
    def size = self[:size]
    def size=(v) self[:size] = v end
    def capacity = self[:capacity]
    def capacity=(v) self[:capacity] = v end
    def self.create_as(_data_, _size_, _capacity_)
      instance = BLFontFeatureSettingsImpl.new
      instance[:data] = _data_
      instance[:size] = _size_
      instance[:capacity] = _capacity_
      instance
    end
  end

  class BLFontFeatureItem < FFI::Struct
    layout(
      :tag, :uint,
      :value, :uint,
    )
    def tag = self[:tag]
    def tag=(v) self[:tag] = v end
    def value = self[:value]
    def value=(v) self[:value] = v end
    def self.create_as(_tag_, _value_)
      instance = BLFontFeatureItem.new
      instance[:tag] = _tag_
      instance[:value] = _value_
      instance
    end
  end

  class BLFontFeatureSettingsView < FFI::Struct
    layout(
      :data, :pointer,
      :size, :ulong_long,
      :ssoData, [BLFontFeatureItem, 36],
    )
    def data = self[:data]
    def data=(v) self[:data] = v end
    def size = self[:size]
    def size=(v) self[:size] = v end
    def ssoData = self[:ssoData]
    def ssoData=(v) self[:ssoData] = v end
    def self.create_as(_data_, _size_, _ssoData_)
      instance = BLFontFeatureSettingsView.new
      instance[:data] = _data_
      instance[:size] = _size_
      instance[:ssoData] = _ssoData_
      instance
    end
  end


  # Function

  def self.setup_fontfeaturesettings_symbols(output_error = false)
    symbols = [
      :blFontFeatureSettingsInit,
      :blFontFeatureSettingsInitMove,
      :blFontFeatureSettingsInitWeak,
      :blFontFeatureSettingsDestroy,
      :blFontFeatureSettingsReset,
      :blFontFeatureSettingsClear,
      :blFontFeatureSettingsShrink,
      :blFontFeatureSettingsAssignMove,
      :blFontFeatureSettingsAssignWeak,
      :blFontFeatureSettingsGetSize,
      :blFontFeatureSettingsGetCapacity,
      :blFontFeatureSettingsGetView,
      :blFontFeatureSettingsHasValue,
      :blFontFeatureSettingsGetValue,
      :blFontFeatureSettingsSetValue,
      :blFontFeatureSettingsRemoveValue,
      :blFontFeatureSettingsEquals,
    ]
    apis = {
      :blFontFeatureSettingsInit => :blFontFeatureSettingsInit,
      :blFontFeatureSettingsInitMove => :blFontFeatureSettingsInitMove,
      :blFontFeatureSettingsInitWeak => :blFontFeatureSettingsInitWeak,
      :blFontFeatureSettingsDestroy => :blFontFeatureSettingsDestroy,
      :blFontFeatureSettingsReset => :blFontFeatureSettingsReset,
      :blFontFeatureSettingsClear => :blFontFeatureSettingsClear,
      :blFontFeatureSettingsShrink => :blFontFeatureSettingsShrink,
      :blFontFeatureSettingsAssignMove => :blFontFeatureSettingsAssignMove,
      :blFontFeatureSettingsAssignWeak => :blFontFeatureSettingsAssignWeak,
      :blFontFeatureSettingsGetSize => :blFontFeatureSettingsGetSize,
      :blFontFeatureSettingsGetCapacity => :blFontFeatureSettingsGetCapacity,
      :blFontFeatureSettingsGetView => :blFontFeatureSettingsGetView,
      :blFontFeatureSettingsHasValue => :blFontFeatureSettingsHasValue,
      :blFontFeatureSettingsGetValue => :blFontFeatureSettingsGetValue,
      :blFontFeatureSettingsSetValue => :blFontFeatureSettingsSetValue,
      :blFontFeatureSettingsRemoveValue => :blFontFeatureSettingsRemoveValue,
      :blFontFeatureSettingsEquals => :blFontFeatureSettingsEquals,
    }
    args = {
      :blFontFeatureSettingsInit => [:pointer],
      :blFontFeatureSettingsInitMove => [:pointer, :pointer],
      :blFontFeatureSettingsInitWeak => [:pointer, :pointer],
      :blFontFeatureSettingsDestroy => [:pointer],
      :blFontFeatureSettingsReset => [:pointer],
      :blFontFeatureSettingsClear => [:pointer],
      :blFontFeatureSettingsShrink => [:pointer],
      :blFontFeatureSettingsAssignMove => [:pointer, :pointer],
      :blFontFeatureSettingsAssignWeak => [:pointer, :pointer],
      :blFontFeatureSettingsGetSize => [:pointer],
      :blFontFeatureSettingsGetCapacity => [:pointer],
      :blFontFeatureSettingsGetView => [:pointer, :pointer],
      :blFontFeatureSettingsHasValue => [:pointer, :uint],
      :blFontFeatureSettingsGetValue => [:pointer, :uint],
      :blFontFeatureSettingsSetValue => [:pointer, :uint, :uint],
      :blFontFeatureSettingsRemoveValue => [:pointer, :uint],
      :blFontFeatureSettingsEquals => [:pointer, :pointer],
    }
    retvals = {
      :blFontFeatureSettingsInit => :uint,
      :blFontFeatureSettingsInitMove => :uint,
      :blFontFeatureSettingsInitWeak => :uint,
      :blFontFeatureSettingsDestroy => :uint,
      :blFontFeatureSettingsReset => :uint,
      :blFontFeatureSettingsClear => :uint,
      :blFontFeatureSettingsShrink => :uint,
      :blFontFeatureSettingsAssignMove => :uint,
      :blFontFeatureSettingsAssignWeak => :uint,
      :blFontFeatureSettingsGetSize => :ulong_long,
      :blFontFeatureSettingsGetCapacity => :ulong_long,
      :blFontFeatureSettingsGetView => :uint,
      :blFontFeatureSettingsHasValue => :bool,
      :blFontFeatureSettingsGetValue => :uint,
      :blFontFeatureSettingsSetValue => :uint,
      :blFontFeatureSettingsRemoveValue => :uint,
      :blFontFeatureSettingsEquals => :bool,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

