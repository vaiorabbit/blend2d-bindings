# Ruby-Blend2D : Yet another Blend2D wrapper for Ruby
#
# * https://github.com/vaiorabbit/blend2d-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'
require_relative 'blend2d_geometry'
require_relative 'blend2d_matrix'
require_relative 'blend2d_object'
require_relative 'blend2d_rgba'

module Blend2D
  extend FFI::Library
  # Define/Macro


  # Enum

  BL_GRADIENT_TYPE_LINEAR = 0
  BL_GRADIENT_TYPE_RADIAL = 1
  BL_GRADIENT_TYPE_CONIC = 2
  BL_GRADIENT_TYPE_MAX_VALUE = 2
  BL_GRADIENT_TYPE_FORCE_UINT = -1
  BL_GRADIENT_VALUE_COMMON_X0 = 0
  BL_GRADIENT_VALUE_COMMON_Y0 = 1
  BL_GRADIENT_VALUE_COMMON_X1 = 2
  BL_GRADIENT_VALUE_COMMON_Y1 = 3
  BL_GRADIENT_VALUE_RADIAL_R0 = 4
  BL_GRADIENT_VALUE_RADIAL_R1 = 5
  BL_GRADIENT_VALUE_CONIC_ANGLE = 2
  BL_GRADIENT_VALUE_CONIC_REPEAT = 3
  BL_GRADIENT_VALUE_MAX_VALUE = 5
  BL_GRADIENT_VALUE_FORCE_UINT = -1
  BL_GRADIENT_QUALITY_NEAREST = 0
  BL_GRADIENT_QUALITY_SMOOTH = 1
  BL_GRADIENT_QUALITY_DITHER = 2
  BL_GRADIENT_QUALITY_MAX_VALUE = 2
  BL_GRADIENT_QUALITY_FORCE_UINT = -1

  # Typedef

  typedef :int, :BLGradientType
  typedef :int, :BLGradientValue
  typedef :int, :BLGradientQuality

  # Struct

  class BLGradientStop < FFI::Struct
    layout(
      :offset, :double,
      :rgba, BLRgba64,
    )
    def offset = self[:offset]
    def offset=(v) self[:offset] = v end
    def rgba = self[:rgba]
    def rgba=(v) self[:rgba] = v end
    def self.create_as(_offset_, _rgba_)
      instance = BLGradientStop.new
      instance[:offset] = _offset_
      instance[:rgba] = _rgba_
      instance
    end
  end

  class BLLinearGradientValues < FFI::Struct
    layout(
      :x0, :double,
      :y0, :double,
      :x1, :double,
      :y1, :double,
    )
    def x0 = self[:x0]
    def x0=(v) self[:x0] = v end
    def y0 = self[:y0]
    def y0=(v) self[:y0] = v end
    def x1 = self[:x1]
    def x1=(v) self[:x1] = v end
    def y1 = self[:y1]
    def y1=(v) self[:y1] = v end
    def self.create_as(_x0_, _y0_, _x1_, _y1_)
      instance = BLLinearGradientValues.new
      instance[:x0] = _x0_
      instance[:y0] = _y0_
      instance[:x1] = _x1_
      instance[:y1] = _y1_
      instance
    end
  end

  class BLRadialGradientValues < FFI::Struct
    layout(
      :x0, :double,
      :y0, :double,
      :x1, :double,
      :y1, :double,
      :r0, :double,
      :r1, :double,
    )
    def x0 = self[:x0]
    def x0=(v) self[:x0] = v end
    def y0 = self[:y0]
    def y0=(v) self[:y0] = v end
    def x1 = self[:x1]
    def x1=(v) self[:x1] = v end
    def y1 = self[:y1]
    def y1=(v) self[:y1] = v end
    def r0 = self[:r0]
    def r0=(v) self[:r0] = v end
    def r1 = self[:r1]
    def r1=(v) self[:r1] = v end
    def self.create_as(_x0_, _y0_, _x1_, _y1_, _r0_, _r1_)
      instance = BLRadialGradientValues.new
      instance[:x0] = _x0_
      instance[:y0] = _y0_
      instance[:x1] = _x1_
      instance[:y1] = _y1_
      instance[:r0] = _r0_
      instance[:r1] = _r1_
      instance
    end
  end

  class BLConicGradientValues < FFI::Struct
    layout(
      :x0, :double,
      :y0, :double,
      :angle, :double,
      :repeat, :double,
    )
    def x0 = self[:x0]
    def x0=(v) self[:x0] = v end
    def y0 = self[:y0]
    def y0=(v) self[:y0] = v end
    def angle = self[:angle]
    def angle=(v) self[:angle] = v end
    def repeat = self[:repeat]
    def repeat=(v) self[:repeat] = v end
    def self.create_as(_x0_, _y0_, _angle_, _repeat_)
      instance = BLConicGradientValues.new
      instance[:x0] = _x0_
      instance[:y0] = _y0_
      instance[:angle] = _angle_
      instance[:repeat] = _repeat_
      instance
    end
  end

  class BLGradientCore < FFI::Struct
    layout(
      :_d, BLObjectDetail,
    )
    def _d = self[:_d]
    def _d=(v) self[:_d] = v end
    def init() = blGradientInit(self)
    def self.create()
      instance = BLGradientCore.new
      blGradientInit(instance)
      instance
    end
    def initMove(other) = blGradientInitMove(self, other)
    def initWeak(other) = blGradientInitWeak(self, other)
    def initAs(type, values, extendMode, stops, n, transform) = blGradientInitAs(self, type, values, extendMode, stops, n, transform)
    def self.create_as(type, values, extendMode, stops, n, transform)
      instance = BLGradientCore.new
      blGradientInitAs(instance, type, values, extendMode, stops, n, transform)
      instance
    end
    def destroy() = blGradientDestroy(self)
    def reset() = blGradientReset(self)
    def assignMove(other) = blGradientAssignMove(self, other)
    def assignWeak(other) = blGradientAssignWeak(self, other)
    def create(type, values, extendMode, stops, n, transform) = blGradientCreate(self, type, values, extendMode, stops, n, transform)
    def shrink() = blGradientShrink(self)
    def reserve(n) = blGradientReserve(self, n)
    def getType() = blGradientGetType(self)
    def setType(type) = blGradientSetType(self, type)
    def getExtendMode() = blGradientGetExtendMode(self)
    def setExtendMode(extendMode) = blGradientSetExtendMode(self, extendMode)
    def getValue(index) = blGradientGetValue(self, index)
    def setValue(index, value) = blGradientSetValue(self, index, value)
    def setValues(index, values, n) = blGradientSetValues(self, index, values, n)
    def getSize() = blGradientGetSize(self)
    def getCapacity() = blGradientGetCapacity(self)
    def getStops() = blGradientGetStops(self)
    def resetStops() = blGradientResetStops(self)
    def assignStops(stops, n) = blGradientAssignStops(self, stops, n)
    def addStopRgba32(offset, argb32) = blGradientAddStopRgba32(self, offset, argb32)
    def addStopRgba64(offset, argb64) = blGradientAddStopRgba64(self, offset, argb64)
    def removeStop(index) = blGradientRemoveStop(self, index)
    def removeStopByOffset(offset, all) = blGradientRemoveStopByOffset(self, offset, all)
    def removeStopsByIndex(rStart, rEnd) = blGradientRemoveStopsByIndex(self, rStart, rEnd)
    def removeStopsByOffset(offsetMin, offsetMax) = blGradientRemoveStopsByOffset(self, offsetMin, offsetMax)
    def replaceStopRgba32(index, offset, rgba32) = blGradientReplaceStopRgba32(self, index, offset, rgba32)
    def replaceStopRgba64(index, offset, rgba64) = blGradientReplaceStopRgba64(self, index, offset, rgba64)
    def indexOfStop(offset) = blGradientIndexOfStop(self, offset)
    def getTransform(transformOut) = blGradientGetTransform(self, transformOut)
    def getTransformType() = blGradientGetTransformType(self)
    def applyTransformOp(opType, opData) = blGradientApplyTransformOp(self, opType, opData)
    def equals(b) = blGradientEquals(a, b)
  end


  # class BLGradientStop < FFI::Struct
  #   layout(
  #     :offset, :double,
  #     :rgba, BLRgba64,
  #   )
  # end

  # class BLLinearGradientValues < FFI::Struct
  #   layout(
  #     :x0, :double,
  #     :y0, :double,
  #     :x1, :double,
  #     :y1, :double,
  #   )
  # end

  # class BLRadialGradientValues < FFI::Struct
  #   layout(
  #     :x0, :double,
  #     :y0, :double,
  #     :x1, :double,
  #     :y1, :double,
  #     :r0, :double,
  #   )
  # end

  # class BLConicGradientValues < FFI::Struct
  #   layout(
  #     :x0, :double,
  #     :y0, :double,
  #     :angle, :double,
  #   )
  # end

  # class BLGradientCore < FFI::Struct
  #   layout(
  #     :_d, BLObjectDetail,
  #   )
  # end

  class BLGradientImpl_Contents < FFI::Union
    layout(
      :values, [:double, 6],
      :linear, BLLinearGradientValues,
      :radial, BLRadialGradientValues,
      :conic, BLConicGradientValues,
    )
  end

  class BLGradientImpl < FFI::Struct
    layout(
      :stops, :pointer,
      :size, :ulong,
      :capacity, :ulong,
      :transform, BLMatrix2D,
      :contents, BLGradientImpl_Contents,
    )
  end


  # Function

  def self.setup_gradient_symbols(output_error = false)
    symbols = [
      :blGradientInit,
      :blGradientInitMove,
      :blGradientInitWeak,
      :blGradientInitAs,
      :blGradientDestroy,
      :blGradientReset,
      :blGradientAssignMove,
      :blGradientAssignWeak,
      :blGradientCreate,
      :blGradientShrink,
      :blGradientReserve,
      :blGradientGetType,
      :blGradientSetType,
      :blGradientGetExtendMode,
      :blGradientSetExtendMode,
      :blGradientGetValue,
      :blGradientSetValue,
      :blGradientSetValues,
      :blGradientGetSize,
      :blGradientGetCapacity,
      :blGradientGetStops,
      :blGradientResetStops,
      :blGradientAssignStops,
      :blGradientAddStopRgba32,
      :blGradientAddStopRgba64,
      :blGradientRemoveStop,
      :blGradientRemoveStopByOffset,
      :blGradientRemoveStopsByIndex,
      :blGradientRemoveStopsByOffset,
      :blGradientReplaceStopRgba32,
      :blGradientReplaceStopRgba64,
      :blGradientIndexOfStop,
      :blGradientGetTransform,
      :blGradientGetTransformType,
      :blGradientApplyTransformOp,
      :blGradientEquals,
    ]
    apis = {
      :blGradientInit => :blGradientInit,
      :blGradientInitMove => :blGradientInitMove,
      :blGradientInitWeak => :blGradientInitWeak,
      :blGradientInitAs => :blGradientInitAs,
      :blGradientDestroy => :blGradientDestroy,
      :blGradientReset => :blGradientReset,
      :blGradientAssignMove => :blGradientAssignMove,
      :blGradientAssignWeak => :blGradientAssignWeak,
      :blGradientCreate => :blGradientCreate,
      :blGradientShrink => :blGradientShrink,
      :blGradientReserve => :blGradientReserve,
      :blGradientGetType => :blGradientGetType,
      :blGradientSetType => :blGradientSetType,
      :blGradientGetExtendMode => :blGradientGetExtendMode,
      :blGradientSetExtendMode => :blGradientSetExtendMode,
      :blGradientGetValue => :blGradientGetValue,
      :blGradientSetValue => :blGradientSetValue,
      :blGradientSetValues => :blGradientSetValues,
      :blGradientGetSize => :blGradientGetSize,
      :blGradientGetCapacity => :blGradientGetCapacity,
      :blGradientGetStops => :blGradientGetStops,
      :blGradientResetStops => :blGradientResetStops,
      :blGradientAssignStops => :blGradientAssignStops,
      :blGradientAddStopRgba32 => :blGradientAddStopRgba32,
      :blGradientAddStopRgba64 => :blGradientAddStopRgba64,
      :blGradientRemoveStop => :blGradientRemoveStop,
      :blGradientRemoveStopByOffset => :blGradientRemoveStopByOffset,
      :blGradientRemoveStopsByIndex => :blGradientRemoveStopsByIndex,
      :blGradientRemoveStopsByOffset => :blGradientRemoveStopsByOffset,
      :blGradientReplaceStopRgba32 => :blGradientReplaceStopRgba32,
      :blGradientReplaceStopRgba64 => :blGradientReplaceStopRgba64,
      :blGradientIndexOfStop => :blGradientIndexOfStop,
      :blGradientGetTransform => :blGradientGetTransform,
      :blGradientGetTransformType => :blGradientGetTransformType,
      :blGradientApplyTransformOp => :blGradientApplyTransformOp,
      :blGradientEquals => :blGradientEquals,
    }
    args = {
      :blGradientInit => [:pointer],
      :blGradientInitMove => [:pointer, :pointer],
      :blGradientInitWeak => [:pointer, :pointer],
      :blGradientInitAs => [:pointer, :int, :pointer, :int, :pointer, :ulong_long, :pointer],
      :blGradientDestroy => [:pointer],
      :blGradientReset => [:pointer],
      :blGradientAssignMove => [:pointer, :pointer],
      :blGradientAssignWeak => [:pointer, :pointer],
      :blGradientCreate => [:pointer, :int, :pointer, :int, :pointer, :ulong_long, :pointer],
      :blGradientShrink => [:pointer],
      :blGradientReserve => [:pointer, :ulong_long],
      :blGradientGetType => [:pointer],
      :blGradientSetType => [:pointer, :int],
      :blGradientGetExtendMode => [:pointer],
      :blGradientSetExtendMode => [:pointer, :int],
      :blGradientGetValue => [:pointer, :ulong_long],
      :blGradientSetValue => [:pointer, :ulong_long, :double],
      :blGradientSetValues => [:pointer, :ulong_long, :pointer, :ulong_long],
      :blGradientGetSize => [:pointer],
      :blGradientGetCapacity => [:pointer],
      :blGradientGetStops => [:pointer],
      :blGradientResetStops => [:pointer],
      :blGradientAssignStops => [:pointer, :pointer, :ulong_long],
      :blGradientAddStopRgba32 => [:pointer, :double, :uint],
      :blGradientAddStopRgba64 => [:pointer, :double, :ulong_long],
      :blGradientRemoveStop => [:pointer, :ulong_long],
      :blGradientRemoveStopByOffset => [:pointer, :double, :uint],
      :blGradientRemoveStopsByIndex => [:pointer, :ulong_long, :ulong_long],
      :blGradientRemoveStopsByOffset => [:pointer, :double, :double],
      :blGradientReplaceStopRgba32 => [:pointer, :ulong_long, :double, :uint],
      :blGradientReplaceStopRgba64 => [:pointer, :ulong_long, :double, :ulong_long],
      :blGradientIndexOfStop => [:pointer, :double],
      :blGradientGetTransform => [:pointer, :pointer],
      :blGradientGetTransformType => [:pointer],
      :blGradientApplyTransformOp => [:pointer, :int, :pointer],
      :blGradientEquals => [:pointer, :pointer],
    }
    retvals = {
      :blGradientInit => :uint,
      :blGradientInitMove => :uint,
      :blGradientInitWeak => :uint,
      :blGradientInitAs => :uint,
      :blGradientDestroy => :uint,
      :blGradientReset => :uint,
      :blGradientAssignMove => :uint,
      :blGradientAssignWeak => :uint,
      :blGradientCreate => :uint,
      :blGradientShrink => :uint,
      :blGradientReserve => :uint,
      :blGradientGetType => :int,
      :blGradientSetType => :uint,
      :blGradientGetExtendMode => :int,
      :blGradientSetExtendMode => :uint,
      :blGradientGetValue => :double,
      :blGradientSetValue => :uint,
      :blGradientSetValues => :uint,
      :blGradientGetSize => :ulong_long,
      :blGradientGetCapacity => :ulong_long,
      :blGradientGetStops => :pointer,
      :blGradientResetStops => :uint,
      :blGradientAssignStops => :uint,
      :blGradientAddStopRgba32 => :uint,
      :blGradientAddStopRgba64 => :uint,
      :blGradientRemoveStop => :uint,
      :blGradientRemoveStopByOffset => :uint,
      :blGradientRemoveStopsByIndex => :uint,
      :blGradientRemoveStopsByOffset => :uint,
      :blGradientReplaceStopRgba32 => :uint,
      :blGradientReplaceStopRgba64 => :uint,
      :blGradientIndexOfStop => :ulong_long,
      :blGradientGetTransform => :uint,
      :blGradientGetTransformType => :int,
      :blGradientApplyTransformOp => :uint,
      :blGradientEquals => :bool,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

