# Ruby-Blend2D : Yet another Blend2D wrapper for Ruby
#
# * https://github.com/vaiorabbit/blend2d-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'
require_relative 'blend2d_geometry'
require_relative 'blend2d_matrix'
require_relative 'blend2d_object'
require_relative 'blend2d_rgba'

module Blend2D
  extend FFI::Library
  # Define/Macro


  # Enum

  BL_GRADIENT_TYPE_LINEAR = 0
  BL_GRADIENT_TYPE_RADIAL = 1
  BL_GRADIENT_TYPE_CONIC = 2
  BL_GRADIENT_TYPE_MAX_VALUE = 2
  BL_GRADIENT_TYPE_FORCE_UINT = 4294967295
  BL_GRADIENT_VALUE_COMMON_X0 = 0
  BL_GRADIENT_VALUE_COMMON_Y0 = 1
  BL_GRADIENT_VALUE_COMMON_X1 = 2
  BL_GRADIENT_VALUE_COMMON_Y1 = 3
  BL_GRADIENT_VALUE_RADIAL_R0 = 4
  BL_GRADIENT_VALUE_CONIC_ANGLE = 2
  BL_GRADIENT_VALUE_MAX_VALUE = 5
  BL_GRADIENT_VALUE_FORCE_UINT = 4294967295
  BL_GRADIENT_QUALITY_NEAREST = 0
  BL_GRADIENT_QUALITY_SMOOTH = 1
  BL_GRADIENT_QUALITY_DITHER = 2
  BL_GRADIENT_QUALITY_MAX_VALUE = 2
  BL_GRADIENT_QUALITY_FORCE_UINT = 4294967295

  # Typedef


  class BLGradientStop < FFI::Struct
    layout(
      :offset, :double,
      :rgba, BLRgba64,
    )
  end

  class BLLinearGradientValues < FFI::Struct
    layout(
      :x0, :double,
      :y0, :double,
      :x1, :double,
      :y1, :double,
    )
  end

  class BLRadialGradientValues < FFI::Struct
    layout(
      :x0, :double,
      :y0, :double,
      :x1, :double,
      :y1, :double,
      :r0, :double,
    )
  end

  class BLConicGradientValues < FFI::Struct
    layout(
      :x0, :double,
      :y0, :double,
      :angle, :double,
    )
  end

  class BLGradientCore < FFI::Struct
    layout(
      :_d, BLObjectDetail,
    )
  end

  class BLGradientImpl_Contents < FFI::Union
    layout(
      :values, [:double, 6],
      :linear, BLLinearGradientValues,
      :radial, BLRadialGradientValues,
      :conic, BLConicGradientValues,
    )
  end

  class BLGradientImpl < FFI::Struct
    layout(
      :stops, :pointer,
      :size, :ulong,
      :capacity, :ulong,
      :transform, BLMatrix2D,
      :contents, BLGradientImpl_Contents,
    )
  end

  typedef :int, :BLGradientType
  typedef :int, :BLGradientValue
  typedef :int, :BLGradientQuality

  # Struct


  # Function

  def self.setup_gradient_symbols(output_error = false)
    symbols = [
      :blGradientInit,
      :blGradientInitMove,
      :blGradientInitWeak,
      :blGradientInitAs,
      :blGradientDestroy,
      :blGradientReset,
      :blGradientAssignMove,
      :blGradientAssignWeak,
      :blGradientCreate,
      :blGradientShrink,
      :blGradientReserve,
      :blGradientGetType,
      :blGradientSetType,
      :blGradientGetExtendMode,
      :blGradientSetExtendMode,
      :blGradientGetValue,
      :blGradientSetValue,
      :blGradientSetValues,
      :blGradientGetSize,
      :blGradientGetCapacity,
      :blGradientGetStops,
      :blGradientResetStops,
      :blGradientAssignStops,
      :blGradientAddStopRgba32,
      :blGradientAddStopRgba64,
      :blGradientRemoveStop,
      :blGradientRemoveStopByOffset,
      :blGradientRemoveStopsByIndex,
      :blGradientRemoveStopsByOffset,
      :blGradientReplaceStopRgba32,
      :blGradientReplaceStopRgba64,
      :blGradientIndexOfStop,
      :blGradientGetTransform,
      :blGradientGetTransformType,
      :blGradientApplyTransformOp,
      :blGradientEquals,
    ]
    apis = {
      :blGradientInit => :blGradientInit,
      :blGradientInitMove => :blGradientInitMove,
      :blGradientInitWeak => :blGradientInitWeak,
      :blGradientInitAs => :blGradientInitAs,
      :blGradientDestroy => :blGradientDestroy,
      :blGradientReset => :blGradientReset,
      :blGradientAssignMove => :blGradientAssignMove,
      :blGradientAssignWeak => :blGradientAssignWeak,
      :blGradientCreate => :blGradientCreate,
      :blGradientShrink => :blGradientShrink,
      :blGradientReserve => :blGradientReserve,
      :blGradientGetType => :blGradientGetType,
      :blGradientSetType => :blGradientSetType,
      :blGradientGetExtendMode => :blGradientGetExtendMode,
      :blGradientSetExtendMode => :blGradientSetExtendMode,
      :blGradientGetValue => :blGradientGetValue,
      :blGradientSetValue => :blGradientSetValue,
      :blGradientSetValues => :blGradientSetValues,
      :blGradientGetSize => :blGradientGetSize,
      :blGradientGetCapacity => :blGradientGetCapacity,
      :blGradientGetStops => :blGradientGetStops,
      :blGradientResetStops => :blGradientResetStops,
      :blGradientAssignStops => :blGradientAssignStops,
      :blGradientAddStopRgba32 => :blGradientAddStopRgba32,
      :blGradientAddStopRgba64 => :blGradientAddStopRgba64,
      :blGradientRemoveStop => :blGradientRemoveStop,
      :blGradientRemoveStopByOffset => :blGradientRemoveStopByOffset,
      :blGradientRemoveStopsByIndex => :blGradientRemoveStopsByIndex,
      :blGradientRemoveStopsByOffset => :blGradientRemoveStopsByOffset,
      :blGradientReplaceStopRgba32 => :blGradientReplaceStopRgba32,
      :blGradientReplaceStopRgba64 => :blGradientReplaceStopRgba64,
      :blGradientIndexOfStop => :blGradientIndexOfStop,
      :blGradientGetTransform => :blGradientGetTransform,
      :blGradientGetTransformType => :blGradientGetTransformType,
      :blGradientApplyTransformOp => :blGradientApplyTransformOp,
      :blGradientEquals => :blGradientEquals,
    }
    args = {
      :blGradientInit => [:pointer],
      :blGradientInitMove => [:pointer, :pointer],
      :blGradientInitWeak => [:pointer, :pointer],
      :blGradientInitAs => [:pointer, :int, :pointer, :int, :pointer, :ulong, :pointer],
      :blGradientDestroy => [:pointer],
      :blGradientReset => [:pointer],
      :blGradientAssignMove => [:pointer, :pointer],
      :blGradientAssignWeak => [:pointer, :pointer],
      :blGradientCreate => [:pointer, :int, :pointer, :int, :pointer, :ulong, :pointer],
      :blGradientShrink => [:pointer],
      :blGradientReserve => [:pointer, :ulong],
      :blGradientGetType => [:pointer],
      :blGradientSetType => [:pointer, :int],
      :blGradientGetExtendMode => [:pointer],
      :blGradientSetExtendMode => [:pointer, :int],
      :blGradientGetValue => [:pointer, :ulong],
      :blGradientSetValue => [:pointer, :ulong, :double],
      :blGradientSetValues => [:pointer, :ulong, :pointer, :ulong],
      :blGradientGetSize => [:pointer],
      :blGradientGetCapacity => [:pointer],
      :blGradientGetStops => [:pointer],
      :blGradientResetStops => [:pointer],
      :blGradientAssignStops => [:pointer, :pointer, :ulong],
      :blGradientAddStopRgba32 => [:pointer, :double, :uint],
      :blGradientAddStopRgba64 => [:pointer, :double, :ulong_long],
      :blGradientRemoveStop => [:pointer, :ulong],
      :blGradientRemoveStopByOffset => [:pointer, :double, :uint],
      :blGradientRemoveStopsByIndex => [:pointer, :ulong, :ulong],
      :blGradientRemoveStopsByOffset => [:pointer, :double, :double],
      :blGradientReplaceStopRgba32 => [:pointer, :ulong, :double, :uint],
      :blGradientReplaceStopRgba64 => [:pointer, :ulong, :double, :ulong_long],
      :blGradientIndexOfStop => [:pointer, :double],
      :blGradientGetTransform => [:pointer, :pointer],
      :blGradientGetTransformType => [:pointer],
      :blGradientApplyTransformOp => [:pointer, :int, :pointer],
      :blGradientEquals => [:pointer, :pointer],
    }
    retvals = {
      :blGradientInit => :uint,
      :blGradientInitMove => :uint,
      :blGradientInitWeak => :uint,
      :blGradientInitAs => :uint,
      :blGradientDestroy => :uint,
      :blGradientReset => :uint,
      :blGradientAssignMove => :uint,
      :blGradientAssignWeak => :uint,
      :blGradientCreate => :uint,
      :blGradientShrink => :uint,
      :blGradientReserve => :uint,
      :blGradientGetType => :int,
      :blGradientSetType => :uint,
      :blGradientGetExtendMode => :int,
      :blGradientSetExtendMode => :uint,
      :blGradientGetValue => :double,
      :blGradientSetValue => :uint,
      :blGradientSetValues => :uint,
      :blGradientGetSize => :ulong,
      :blGradientGetCapacity => :ulong,
      :blGradientGetStops => :pointer,
      :blGradientResetStops => :uint,
      :blGradientAssignStops => :uint,
      :blGradientAddStopRgba32 => :uint,
      :blGradientAddStopRgba64 => :uint,
      :blGradientRemoveStop => :uint,
      :blGradientRemoveStopByOffset => :uint,
      :blGradientRemoveStopsByIndex => :uint,
      :blGradientRemoveStopsByOffset => :uint,
      :blGradientReplaceStopRgba32 => :uint,
      :blGradientReplaceStopRgba64 => :uint,
      :blGradientIndexOfStop => :ulong,
      :blGradientGetTransform => :uint,
      :blGradientGetTransformType => :int,
      :blGradientApplyTransformOp => :uint,
      :blGradientEquals => :int,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

