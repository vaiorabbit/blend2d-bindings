# Ruby-Blend2D : Yet another Blend2D wrapper for Ruby
#
# * https://github.com/vaiorabbit/blend2d-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'
require_relative 'blend2d_array'
require_relative 'blend2d_object'
require_relative 'blend2d_string'

module Blend2D
  extend FFI::Library
  # Define/Macro


  # Enum

  BL_IMAGE_CODEC_NO_FEATURES = 0
  BL_IMAGE_CODEC_FEATURE_READ = 1
  BL_IMAGE_CODEC_FEATURE_WRITE = 2
  BL_IMAGE_CODEC_FEATURE_LOSSLESS = 4
  BL_IMAGE_CODEC_FEATURE_LOSSY = 8
  BL_IMAGE_CODEC_FEATURE_MULTI_FRAME = 16
  BL_IMAGE_CODEC_FEATURE_IPTC = 268435456
  BL_IMAGE_CODEC_FEATURE_EXIF = 536870912
  BL_IMAGE_CODEC_FEATURE_XMP = 1073741824
  BL_IMAGE_CODEC_FEATURE_FORCE_UINT = 4294967295

  # Typedef

  typedef :int, :BLImageCodecFeatures

  # Struct

  class BLImageCodecCore < FFI::Struct
    layout(
      :_d, BLObjectDetail,
    )
    def _d = self[:_d]
    def _d=(v) self[:_d] = v end
    def init() = blImageCodecInit(self)
    def self.create()
      instance = BLImageCodecCore.new
      blImageCodecInit(instance)
      instance
    end
    def initMove(other) = blImageCodecInitMove(self, other)
    def initWeak(other) = blImageCodecInitWeak(self, other)
    def initByName(name, size, codecs) = blImageCodecInitByName(self, name, size, codecs)
    def destroy() = blImageCodecDestroy(self)
    def reset() = blImageCodecReset(self)
    def assignMove(other) = blImageCodecAssignMove(self, other)
    def assignWeak(other) = blImageCodecAssignWeak(self, other)
    def findByName(name, size, codecs) = blImageCodecFindByName(self, name, size, codecs)
    def findByExtension(name, size, codecs) = blImageCodecFindByExtension(self, name, size, codecs)
    def findByData(data, size, codecs) = blImageCodecFindByData(self, data, size, codecs)
    def inspectData(data, size) = blImageCodecInspectData(self, data, size)
    def createDecoder(dst) = blImageCodecCreateDecoder(self, dst)
    def createEncoder(dst) = blImageCodecCreateEncoder(self, dst)
    def arrayInitBuiltInCodecs() = blImageCodecArrayInitBuiltInCodecs(self)
    def arrayAssignBuiltInCodecs() = blImageCodecArrayAssignBuiltInCodecs(self)
    def addToBuiltIn() = blImageCodecAddToBuiltIn(codec)
    def removeFromBuiltIn() = blImageCodecRemoveFromBuiltIn(codec)
  end

  class BLImageCodecVirt < FFI::Struct
    layout(
      :base, BLObjectVirtBase,
      :inspectData, :pointer,
      :createDecoder, :pointer,
      :createEncoder, :pointer,
    )
    def base = self[:base]
    def base=(v) self[:base] = v end
    def inspectData = self[:inspectData]
    def inspectData=(v) self[:inspectData] = v end
    def createDecoder = self[:createDecoder]
    def createDecoder=(v) self[:createDecoder] = v end
    def createEncoder = self[:createEncoder]
    def createEncoder=(v) self[:createEncoder] = v end
    def self.create_as(_base_, _inspectData_, _createDecoder_, _createEncoder_)
      instance = BLImageCodecVirt.new
      instance[:base] = _base_
      instance[:inspectData] = _inspectData_
      instance[:createDecoder] = _createDecoder_
      instance[:createEncoder] = _createEncoder_
      instance
    end
  end

  class BLImageCodecImpl < FFI::Struct
    layout(
      :virt, :pointer,
      :name, BLStringCore,
      :vendor, BLStringCore,
      :mimeType, BLStringCore,
      :extensions, BLStringCore,
      :features, :uint,
    )
    def virt = self[:virt]
    def virt=(v) self[:virt] = v end
    def name = self[:name]
    def name=(v) self[:name] = v end
    def vendor = self[:vendor]
    def vendor=(v) self[:vendor] = v end
    def mimeType = self[:mimeType]
    def mimeType=(v) self[:mimeType] = v end
    def extensions = self[:extensions]
    def extensions=(v) self[:extensions] = v end
    def features = self[:features]
    def features=(v) self[:features] = v end
    def self.create_as(_virt_, _name_, _vendor_, _mimeType_, _extensions_, _features_)
      instance = BLImageCodecImpl.new
      instance[:virt] = _virt_
      instance[:name] = _name_
      instance[:vendor] = _vendor_
      instance[:mimeType] = _mimeType_
      instance[:extensions] = _extensions_
      instance[:features] = _features_
      instance
    end
  end


  # Function

  def self.setup_imagecodec_symbols(output_error = false)
    symbols = [
      :blImageCodecInit,
      :blImageCodecInitMove,
      :blImageCodecInitWeak,
      :blImageCodecInitByName,
      :blImageCodecDestroy,
      :blImageCodecReset,
      :blImageCodecAssignMove,
      :blImageCodecAssignWeak,
      :blImageCodecFindByName,
      :blImageCodecFindByExtension,
      :blImageCodecFindByData,
      :blImageCodecInspectData,
      :blImageCodecCreateDecoder,
      :blImageCodecCreateEncoder,
      :blImageCodecArrayInitBuiltInCodecs,
      :blImageCodecArrayAssignBuiltInCodecs,
      :blImageCodecAddToBuiltIn,
      :blImageCodecRemoveFromBuiltIn,
    ]
    apis = {
      :blImageCodecInit => :blImageCodecInit,
      :blImageCodecInitMove => :blImageCodecInitMove,
      :blImageCodecInitWeak => :blImageCodecInitWeak,
      :blImageCodecInitByName => :blImageCodecInitByName,
      :blImageCodecDestroy => :blImageCodecDestroy,
      :blImageCodecReset => :blImageCodecReset,
      :blImageCodecAssignMove => :blImageCodecAssignMove,
      :blImageCodecAssignWeak => :blImageCodecAssignWeak,
      :blImageCodecFindByName => :blImageCodecFindByName,
      :blImageCodecFindByExtension => :blImageCodecFindByExtension,
      :blImageCodecFindByData => :blImageCodecFindByData,
      :blImageCodecInspectData => :blImageCodecInspectData,
      :blImageCodecCreateDecoder => :blImageCodecCreateDecoder,
      :blImageCodecCreateEncoder => :blImageCodecCreateEncoder,
      :blImageCodecArrayInitBuiltInCodecs => :blImageCodecArrayInitBuiltInCodecs,
      :blImageCodecArrayAssignBuiltInCodecs => :blImageCodecArrayAssignBuiltInCodecs,
      :blImageCodecAddToBuiltIn => :blImageCodecAddToBuiltIn,
      :blImageCodecRemoveFromBuiltIn => :blImageCodecRemoveFromBuiltIn,
    }
    args = {
      :blImageCodecInit => [:pointer],
      :blImageCodecInitMove => [:pointer, :pointer],
      :blImageCodecInitWeak => [:pointer, :pointer],
      :blImageCodecInitByName => [:pointer, :pointer, :ulong, :pointer],
      :blImageCodecDestroy => [:pointer],
      :blImageCodecReset => [:pointer],
      :blImageCodecAssignMove => [:pointer, :pointer],
      :blImageCodecAssignWeak => [:pointer, :pointer],
      :blImageCodecFindByName => [:pointer, :pointer, :ulong, :pointer],
      :blImageCodecFindByExtension => [:pointer, :pointer, :ulong, :pointer],
      :blImageCodecFindByData => [:pointer, :pointer, :ulong, :pointer],
      :blImageCodecInspectData => [:pointer, :pointer, :ulong],
      :blImageCodecCreateDecoder => [:pointer, :pointer],
      :blImageCodecCreateEncoder => [:pointer, :pointer],
      :blImageCodecArrayInitBuiltInCodecs => [:pointer],
      :blImageCodecArrayAssignBuiltInCodecs => [:pointer],
      :blImageCodecAddToBuiltIn => [:pointer],
      :blImageCodecRemoveFromBuiltIn => [:pointer],
    }
    retvals = {
      :blImageCodecInit => :uint,
      :blImageCodecInitMove => :uint,
      :blImageCodecInitWeak => :uint,
      :blImageCodecInitByName => :uint,
      :blImageCodecDestroy => :uint,
      :blImageCodecReset => :uint,
      :blImageCodecAssignMove => :uint,
      :blImageCodecAssignWeak => :uint,
      :blImageCodecFindByName => :uint,
      :blImageCodecFindByExtension => :uint,
      :blImageCodecFindByData => :uint,
      :blImageCodecInspectData => :uint,
      :blImageCodecCreateDecoder => :uint,
      :blImageCodecCreateEncoder => :uint,
      :blImageCodecArrayInitBuiltInCodecs => :uint,
      :blImageCodecArrayAssignBuiltInCodecs => :uint,
      :blImageCodecAddToBuiltIn => :uint,
      :blImageCodecRemoveFromBuiltIn => :uint,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

