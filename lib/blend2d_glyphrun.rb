# Ruby-Blend2D : Yet another Blend2D wrapper for Ruby
#
# * https://github.com/vaiorabbit/blend2d-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'
require_relative 'blend2d_fontdefs'

module Blend2D
  extend FFI::Library
  # Define/Macro


  # Enum

  BL_GLYPH_RUN_NO_FLAGS = 0
  BL_GLYPH_RUN_FLAG_UCS4_CONTENT = 268435456
  BL_GLYPH_RUN_FLAG_INVALID_TEXT = 536870912
  BL_GLYPH_RUN_FLAG_UNDEFINED_GLYPHS = 1073741824
  BL_GLYPH_RUN_FLAG_INVALID_FONT_DATA = 2147483648
  BL_GLYPH_RUN_FLAG_FORCE_UINT = 4294967295
  BL_GLYPH_PLACEMENT_TYPE_NONE = 0
  BL_GLYPH_PLACEMENT_TYPE_ADVANCE_OFFSET = 1
  BL_GLYPH_PLACEMENT_TYPE_DESIGN_UNITS = 2
  BL_GLYPH_PLACEMENT_TYPE_USER_UNITS = 3
  BL_GLYPH_PLACEMENT_TYPE_ABSOLUTE_UNITS = 4
  BL_GLYPH_PLACEMENT_TYPE_MAX_VALUE = 4
  BL_GLYPH_PLACEMENT_TYPE_FORCE_UINT = 4294967295

  # Typedef

  typedef :int, :BLGlyphRunFlags
  typedef :int, :BLGlyphPlacementType

  # Struct

  class BLGlyphRun < FFI::Struct
    layout(
      :glyphData, :pointer,
      :placementData, :pointer,
      :size, :ulong,
      :reserved, :uchar,
      :placementType, :uchar,
      :glyphAdvance, :char,
      :placementAdvance, :char,
      :flags, :uint,
    )
    def glyphData = self[:glyphData]
    def glyphData=(v) self[:glyphData] = v end
    def placementData = self[:placementData]
    def placementData=(v) self[:placementData] = v end
    def size = self[:size]
    def size=(v) self[:size] = v end
    def reserved = self[:reserved]
    def reserved=(v) self[:reserved] = v end
    def placementType = self[:placementType]
    def placementType=(v) self[:placementType] = v end
    def glyphAdvance = self[:glyphAdvance]
    def glyphAdvance=(v) self[:glyphAdvance] = v end
    def placementAdvance = self[:placementAdvance]
    def placementAdvance=(v) self[:placementAdvance] = v end
    def flags = self[:flags]
    def flags=(v) self[:flags] = v end
    def self.create_as(_glyphData_, _placementData_, _size_, _reserved_, _placementType_, _glyphAdvance_, _placementAdvance_, _flags_)
      instance = BLGlyphRun.new
      instance[:glyphData] = _glyphData_
      instance[:placementData] = _placementData_
      instance[:size] = _size_
      instance[:reserved] = _reserved_
      instance[:placementType] = _placementType_
      instance[:glyphAdvance] = _glyphAdvance_
      instance[:placementAdvance] = _placementAdvance_
      instance[:flags] = _flags_
      instance
    end
  end


  # Function

  def self.setup_glyphrun_symbols(output_error = false)
    symbols = [
    ]
    apis = {
    }
    args = {
    }
    retvals = {
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

