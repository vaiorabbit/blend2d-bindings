# Ruby-Blend2D : Yet another Blend2D wrapper for Ruby
#
# * https://github.com/vaiorabbit/blend2d-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'
require_relative 'blend2d_object'

module Blend2D
  extend FFI::Library
  # Define/Macro


  # Enum


  # Typedef


  # Struct

  class BLArrayCore < FFI::Struct
    layout(
      :_d, BLObjectDetail,
    )
  end

  class BLArrayImpl < FFI::Struct
    layout(
      :data, :pointer,
      :size, :ulong,
      :capacity, :ulong,
    )
  end


  # Function

  def self.setup_array_symbols(output_error = false)
    symbols = [
      :blArrayInit,
      :blArrayInitMove,
      :blArrayInitWeak,
      :blArrayDestroy,
      :blArrayReset,
      :blArrayGetSize,
      :blArrayGetCapacity,
      :blArrayGetItemSize,
      :blArrayGetData,
      :blArrayClear,
      :blArrayShrink,
      :blArrayReserve,
      :blArrayResize,
      :blArrayMakeMutable,
      :blArrayModifyOp,
      :blArrayInsertOp,
      :blArrayAssignMove,
      :blArrayAssignWeak,
      :blArrayAssignDeep,
      :blArrayAssignData,
      :blArrayAssignExternalData,
      :blArrayAppendU8,
      :blArrayAppendU16,
      :blArrayAppendU32,
      :blArrayAppendU64,
      :blArrayAppendF32,
      :blArrayAppendF64,
      :blArrayAppendItem,
      :blArrayAppendData,
      :blArrayInsertU8,
      :blArrayInsertU16,
      :blArrayInsertU32,
      :blArrayInsertU64,
      :blArrayInsertF32,
      :blArrayInsertF64,
      :blArrayInsertItem,
      :blArrayInsertData,
      :blArrayReplaceU8,
      :blArrayReplaceU16,
      :blArrayReplaceU32,
      :blArrayReplaceU64,
      :blArrayReplaceF32,
      :blArrayReplaceF64,
      :blArrayReplaceItem,
      :blArrayReplaceData,
      :blArrayRemoveIndex,
      :blArrayRemoveRange,
      :blArrayEquals,
    ]
    apis = {
      :blArrayInit => :blArrayInit,
      :blArrayInitMove => :blArrayInitMove,
      :blArrayInitWeak => :blArrayInitWeak,
      :blArrayDestroy => :blArrayDestroy,
      :blArrayReset => :blArrayReset,
      :blArrayGetSize => :blArrayGetSize,
      :blArrayGetCapacity => :blArrayGetCapacity,
      :blArrayGetItemSize => :blArrayGetItemSize,
      :blArrayGetData => :blArrayGetData,
      :blArrayClear => :blArrayClear,
      :blArrayShrink => :blArrayShrink,
      :blArrayReserve => :blArrayReserve,
      :blArrayResize => :blArrayResize,
      :blArrayMakeMutable => :blArrayMakeMutable,
      :blArrayModifyOp => :blArrayModifyOp,
      :blArrayInsertOp => :blArrayInsertOp,
      :blArrayAssignMove => :blArrayAssignMove,
      :blArrayAssignWeak => :blArrayAssignWeak,
      :blArrayAssignDeep => :blArrayAssignDeep,
      :blArrayAssignData => :blArrayAssignData,
      :blArrayAssignExternalData => :blArrayAssignExternalData,
      :blArrayAppendU8 => :blArrayAppendU8,
      :blArrayAppendU16 => :blArrayAppendU16,
      :blArrayAppendU32 => :blArrayAppendU32,
      :blArrayAppendU64 => :blArrayAppendU64,
      :blArrayAppendF32 => :blArrayAppendF32,
      :blArrayAppendF64 => :blArrayAppendF64,
      :blArrayAppendItem => :blArrayAppendItem,
      :blArrayAppendData => :blArrayAppendData,
      :blArrayInsertU8 => :blArrayInsertU8,
      :blArrayInsertU16 => :blArrayInsertU16,
      :blArrayInsertU32 => :blArrayInsertU32,
      :blArrayInsertU64 => :blArrayInsertU64,
      :blArrayInsertF32 => :blArrayInsertF32,
      :blArrayInsertF64 => :blArrayInsertF64,
      :blArrayInsertItem => :blArrayInsertItem,
      :blArrayInsertData => :blArrayInsertData,
      :blArrayReplaceU8 => :blArrayReplaceU8,
      :blArrayReplaceU16 => :blArrayReplaceU16,
      :blArrayReplaceU32 => :blArrayReplaceU32,
      :blArrayReplaceU64 => :blArrayReplaceU64,
      :blArrayReplaceF32 => :blArrayReplaceF32,
      :blArrayReplaceF64 => :blArrayReplaceF64,
      :blArrayReplaceItem => :blArrayReplaceItem,
      :blArrayReplaceData => :blArrayReplaceData,
      :blArrayRemoveIndex => :blArrayRemoveIndex,
      :blArrayRemoveRange => :blArrayRemoveRange,
      :blArrayEquals => :blArrayEquals,
    }
    args = {
      :blArrayInit => [:pointer, :int],
      :blArrayInitMove => [:pointer, :pointer],
      :blArrayInitWeak => [:pointer, :pointer],
      :blArrayDestroy => [:pointer],
      :blArrayReset => [:pointer],
      :blArrayGetSize => [:pointer],
      :blArrayGetCapacity => [:pointer],
      :blArrayGetItemSize => [:pointer],
      :blArrayGetData => [:pointer],
      :blArrayClear => [:pointer],
      :blArrayShrink => [:pointer],
      :blArrayReserve => [:pointer, :ulong],
      :blArrayResize => [:pointer, :ulong, :pointer],
      :blArrayMakeMutable => [:pointer, :pointer],
      :blArrayModifyOp => [:pointer, :int, :ulong, :pointer],
      :blArrayInsertOp => [:pointer, :ulong, :ulong, :pointer],
      :blArrayAssignMove => [:pointer, :pointer],
      :blArrayAssignWeak => [:pointer, :pointer],
      :blArrayAssignDeep => [:pointer, :pointer],
      :blArrayAssignData => [:pointer, :pointer, :ulong],
      :blArrayAssignExternalData => [:pointer, :pointer, :ulong, :ulong, :int, :BLDestroyExternalDataFunc, :pointer],
      :blArrayAppendU8 => [:pointer, :uchar],
      :blArrayAppendU16 => [:pointer, :ushort],
      :blArrayAppendU32 => [:pointer, :uint],
      :blArrayAppendU64 => [:pointer, :ulong_long],
      :blArrayAppendF32 => [:pointer, :float],
      :blArrayAppendF64 => [:pointer, :double],
      :blArrayAppendItem => [:pointer, :pointer],
      :blArrayAppendData => [:pointer, :pointer, :ulong],
      :blArrayInsertU8 => [:pointer, :ulong, :uchar],
      :blArrayInsertU16 => [:pointer, :ulong, :ushort],
      :blArrayInsertU32 => [:pointer, :ulong, :uint],
      :blArrayInsertU64 => [:pointer, :ulong, :ulong_long],
      :blArrayInsertF32 => [:pointer, :ulong, :float],
      :blArrayInsertF64 => [:pointer, :ulong, :double],
      :blArrayInsertItem => [:pointer, :ulong, :pointer],
      :blArrayInsertData => [:pointer, :ulong, :pointer, :ulong],
      :blArrayReplaceU8 => [:pointer, :ulong, :uchar],
      :blArrayReplaceU16 => [:pointer, :ulong, :ushort],
      :blArrayReplaceU32 => [:pointer, :ulong, :uint],
      :blArrayReplaceU64 => [:pointer, :ulong, :ulong_long],
      :blArrayReplaceF32 => [:pointer, :ulong, :float],
      :blArrayReplaceF64 => [:pointer, :ulong, :double],
      :blArrayReplaceItem => [:pointer, :ulong, :pointer],
      :blArrayReplaceData => [:pointer, :ulong, :ulong, :pointer, :ulong],
      :blArrayRemoveIndex => [:pointer, :ulong],
      :blArrayRemoveRange => [:pointer, :ulong, :ulong],
      :blArrayEquals => [:pointer, :pointer],
    }
    retvals = {
      :blArrayInit => :uint,
      :blArrayInitMove => :uint,
      :blArrayInitWeak => :uint,
      :blArrayDestroy => :uint,
      :blArrayReset => :uint,
      :blArrayGetSize => :ulong,
      :blArrayGetCapacity => :ulong,
      :blArrayGetItemSize => :ulong,
      :blArrayGetData => :pointer,
      :blArrayClear => :uint,
      :blArrayShrink => :uint,
      :blArrayReserve => :uint,
      :blArrayResize => :uint,
      :blArrayMakeMutable => :uint,
      :blArrayModifyOp => :uint,
      :blArrayInsertOp => :uint,
      :blArrayAssignMove => :uint,
      :blArrayAssignWeak => :uint,
      :blArrayAssignDeep => :uint,
      :blArrayAssignData => :uint,
      :blArrayAssignExternalData => :uint,
      :blArrayAppendU8 => :uint,
      :blArrayAppendU16 => :uint,
      :blArrayAppendU32 => :uint,
      :blArrayAppendU64 => :uint,
      :blArrayAppendF32 => :uint,
      :blArrayAppendF64 => :uint,
      :blArrayAppendItem => :uint,
      :blArrayAppendData => :uint,
      :blArrayInsertU8 => :uint,
      :blArrayInsertU16 => :uint,
      :blArrayInsertU32 => :uint,
      :blArrayInsertU64 => :uint,
      :blArrayInsertF32 => :uint,
      :blArrayInsertF64 => :uint,
      :blArrayInsertItem => :uint,
      :blArrayInsertData => :uint,
      :blArrayReplaceU8 => :uint,
      :blArrayReplaceU16 => :uint,
      :blArrayReplaceU32 => :uint,
      :blArrayReplaceU64 => :uint,
      :blArrayReplaceF32 => :uint,
      :blArrayReplaceF64 => :uint,
      :blArrayReplaceItem => :uint,
      :blArrayReplaceData => :uint,
      :blArrayRemoveIndex => :uint,
      :blArrayRemoveRange => :uint,
      :blArrayEquals => :int,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

